// Generated by CoffeeScript 1.8.0
var AppControl, AreaBuffer, DrawArea, Draw_area_event_handlers, EventsHandlerInitializer, SchemeData, SchemeElement, SchemeLine, area_map,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty;

AppControl = (function() {
  function AppControl(app_config) {
    this.app_config = app_config;
    this.run = __bind(this.run, this);
    this.draw_image_data = __bind(this.draw_image_data, this);
    this.buffered_draw = __bind(this.buffered_draw, this);
    this.clear_buffer = __bind(this.clear_buffer, this);
    this.init_buffer = __bind(this.init_buffer, this);
    this.load_scheme_data = __bind(this.load_scheme_data, this);
    this.init_scheme_data = __bind(this.init_scheme_data, this);
    this.init_event_handlers = __bind(this.init_event_handlers, this);
    this.update_area = __bind(this.update_area, this);
    this.drawing_buffered_grid = __bind(this.drawing_buffered_grid, this);
    this.init_draw_area = __bind(this.init_draw_area, this);
  }

  AppControl.prototype.init_draw_area = function() {
    var input_color;
    this.draw_area = new DrawArea(this.app_config);
    this.area_map = new area_map(this.app_config.canvas_width, this.app_config.canvas_height, this.app_config.grid_step);
    $(this.app_config.class_paint_scheme_form).addClass('noselect');
    input_color = $('#' + this.app_config.id_paint_form + ' ' + this.app_config.class_color_selector)[0];
    return input_color.value = '#FFFFFF';
  };

  AppControl.prototype.drawing_buffered_grid = function() {
    return this.draw_area.draw_snap_grid(this.app_config.grid_step);
  };

  AppControl.prototype.update_area = function() {
    this.buffered_draw('grid', this.drawing_buffered_grid, 0, 0, this.app_config.canvas_width, this.app_config.canvas_height, this.draw_area.context);
    return this.draw_area.draw_scheme_data(this.schemeData.list_components);
  };

  AppControl.prototype.init_event_handlers = function() {
    return this.EventsHanlerInitializer = new EventsHandlerInitializer(this);
  };

  AppControl.prototype.init_scheme_data = function() {
    return this.schemeData = new SchemeData();
  };

  AppControl.prototype.load_scheme_data = function() {
    return this.schemeData.load_data_from_server(this.app_config, this.area_map, (function(_this) {
      return function() {
        return _this.update_area();
      };
    })(this));
  };

  AppControl.prototype.init_buffer = function() {
    return this.bufferArea = new AreaBuffer();
  };

  AppControl.prototype.clear_buffer = function(key) {
    return this.bufferArea.remove(key);
  };

  AppControl.prototype.buffered_draw = function(key, drawFunct, x, y, w, h, ctx) {
    var b, img;
    b = this.bufferArea.get_by_key(key);
    if (b !== void 0) {
      return this.draw_image_data(b.image, b.x, b.y, ctx);
    } else {
      drawFunct();
      img = ctx.getImageData(x, y, w, h);
      return this.bufferArea.add(key, img, x, y);
    }
  };

  AppControl.prototype.draw_image_data = function(image, dx, dy, ctx) {
    return ctx.putImageData(image, dx, dy);
  };

  AppControl.prototype.run = function() {
    this.init_buffer();
    this.init_scheme_data();
    this.init_draw_area();
    this.init_event_handlers();
    return this.update_area();
  };

  return AppControl;

})();

AreaBuffer = (function() {
  function AreaBuffer() {
    this.remove = __bind(this.remove, this);
    this.update = __bind(this.update, this);
    this.add = __bind(this.add, this);
    this.get_position_in_arr = __bind(this.get_position_in_arr, this);
    this.get_by_key = __bind(this.get_by_key, this);
    this.buffer_array = __bind(this.buffer_array, this);
    this.buffer_array = new Array();
  }

  AreaBuffer.prototype.buffer_array = function() {
    return this.buffer_array;
  };

  AreaBuffer.prototype.get_by_key = function(key) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.buffer_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.buffer_array[i].key === key) {
        return this.buffer_array[i];
      }
    }
    return void 0;
  };

  AreaBuffer.prototype.get_position_in_arr = function(key) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.buffer_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.buffer_array[i].key === key) {
        return i;
      }
    }
    return void 0;
  };

  AreaBuffer.prototype.add = function(key, image, x, y) {
    this.buffer_array.push({
      key: key,
      image: image,
      x: x,
      y: y
    });
    return this.buffer_array.length;
  };

  AreaBuffer.prototype.update = function(key, image) {
    return this.get_by_key(key).image = image;
  };

  AreaBuffer.prototype.remove = function(key) {
    var pos;
    pos = this.get_position_in_array(key);
    if (pos !== void 0) {
      return this.buffer_array.splice(pos, 1);
    }
  };

  return AreaBuffer;

})();

area_map = (function() {
  function area_map(width, height, step) {
    var i, _i, _ref;
    this.width = width;
    this.height = height;
    this.step = step;
    this.get_rect_map_range = __bind(this.get_rect_map_range, this);
    this.clear_range = __bind(this.clear_range, this);
    this.is_empty_map_cell = __bind(this.is_empty_map_cell, this);
    this.is_empty_or_key_map_range = __bind(this.is_empty_or_key_map_range, this);
    this.validate_map_indexes = __bind(this.validate_map_indexes, this);
    this.set_cell = __bind(this.set_cell, this);
    this.get_cell_by_coords = __bind(this.get_cell_by_coords, this);
    this.round_coord_tp_grid_step = __bind(this.round_coord_tp_grid_step, this);
    this.get_cell = __bind(this.get_cell, this);
    this.set_coord_hash = __bind(this.set_coord_hash, this);
    this.clear_coord_hash = __bind(this.clear_coord_hash, this);
    this.clear_line_coord_hash = __bind(this.clear_line_coord_hash, this);
    this.is_empty_line_coord = __bind(this.is_empty_line_coord, this);
    this.hash_line_coords = {};
    this.map = new Array(Math.round(this.height / this.step) + 1);
    for (i = _i = 0, _ref = this.map.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.map[i] = new Array(this.width / this.step + 1);
    }
  }

  area_map.prototype.is_empty_line_coord = function(x, y) {
    return this.hash_line_coords[x * y] === void 0;
  };

  area_map.prototype.clear_line_coord_hash = function() {
    return this.hash_line_coords = {};
  };

  area_map.prototype.clear_coord_hash = function(x, y) {
    return this.hash_line_coords[x * y] = void 0;
  };

  area_map.prototype.set_coord_hash = function(x, y, element_id) {
    return this.hash_line_coords[x * y] = element_id;
  };

  area_map.prototype.get_cell = function(i, j) {
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j];
    }
  };

  area_map.prototype.round_coord_tp_grid_step = function(c) {
    return Math.round(c / this.step) * this.step;
  };

  area_map.prototype.get_cell_by_coords = function(x, y) {
    var i, j;
    j = Math.round(x / this.step);
    i = Math.round(y / this.step);
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j];
    } else {
      return void 0;
    }
  };

  area_map.prototype.set_cell = function(i, j, value) {
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j] = value;
    }
  };

  area_map.prototype.validate_map_indexes = function(i, j) {
    if (i <= this.map.length && i >= 0) {
      if (j <= this.map[0].length && j >= 0) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  area_map.prototype.is_empty_or_key_map_range = function(startI, toI, startJ, toJ, key) {
    var i, j, _i, _j;
    for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
      for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
        if (this.map[i][j] !== void 0 && this.map[i][j] !== key) {
          return false;
        }
      }
    }
    return true;
  };

  area_map.prototype.is_empty_map_cell = function(i, j) {
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j] === void 0;
    }
  };

  area_map.prototype.clear_range = function(startI, toI, startJ, toJ) {
    var i, j, _i, _j;
    if (this.validate_map_indexes(startI, startJ) && this.validate_map_indexes(toI, toJ)) {
      for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
        for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
          this.map[i][j] = void 0;
        }
      }
      return true;
    } else {
      throw "lol";
      return false;
    }
  };

  area_map.prototype.get_rect_map_range = function(x, y, w, h) {
    return {
      fromI: Math.round(y / this.step),
      toI: Math.round((y + h) / this.step),
      fromJ: Math.round(x / this.step),
      toJ: Math.round((x + w) / this.step)
    };
  };

  return area_map;

})();

DrawArea = (function() {
  function DrawArea(app_config) {
    this.app_config = app_config;
    this.snap_to_grid = __bind(this.snap_to_grid, this);
    this.enter_image_in_canvas = __bind(this.enter_image_in_canvas, this);
    this.get_canvas_coords = __bind(this.get_canvas_coords, this);
    this.draw_scheme_data = __bind(this.draw_scheme_data, this);
    this.get_screen_shot = __bind(this.get_screen_shot, this);
    this.get_selected_color = __bind(this.get_selected_color, this);
    this.draw_snap_grid = __bind(this.draw_snap_grid, this);
    this.draw_background = __bind(this.draw_background, this);
    this.canvas = document.getElementById(this.app_config.canvas_id);
    this.canvas.height = this.app_config.canvas_height;
    this.canvas.width = this.app_config.canvas_width;
    this.context = this.canvas.getContext("2d");
  }

  DrawArea.prototype.draw_background = function() {
    this.context.beginPath();
    this.context.fillStyle = 'rgba( 200, 255, 255, 1 )';
    this.context.rect(0, 0, this.canvas.width, this.canvas.height);
    this.context.closePath();
    return this.context.fill();
  };

  DrawArea.prototype.draw_snap_grid = function(step) {
    var i, j, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.canvas.width / step; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (j = _j = 0, _ref1 = this.canvas.height / step; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          this.context.beginPath();
          this.context.arc(i * step, j * step, 1, 0, 2 * Math.PI);
          this.context.fillStyle = 'blue';
          this.context.closePath();
          _results1.push(this.context.fill());
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DrawArea.prototype.get_selected_color = function() {
    return $('#' + this.app_config.id_paint_form + ' ' + this.app_config.class_color_selector)[0].value;
  };

  DrawArea.prototype.get_screen_shot = function() {
    return this.canvas.toDataURL('image/png').replace(/^data:image\/(png|jpg);base64,/, "");
  };

  DrawArea.prototype.draw_scheme_data = function(scheme_data) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = scheme_data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(scheme_data[i].obj.draw(this.context, this.app_config.color_on_hover));
    }
    return _results;
  };

  DrawArea.prototype.get_canvas_coords = function(mouse_x, mouse_y) {
    var c;
    c = this.snap_to_grid(mouse_x - this.canvas.offsetLeft, mouse_y - this.canvas.offsetTop);
    return {
      canvas_x: c.canvas_x,
      canvas_y: c.canvas_y,
      map_cell_x: Math.round(c.canvas_y / this.app_config.grid_step),
      map_cell_y: Math.round(c.canvas_x / this.app_config.grid_step)
    };
  };

  DrawArea.prototype.enter_image_in_canvas = function(x, y, w, h) {
    if (x < this.canvas.offsetLeft) {
      x = this.canvas.offsetLeft;
    }
    if (x + w > this.canvas.offsetLeft + this.canvas.offsetWidth) {
      x = this.canvas.offsetLeft + this.canvas.offsetWidth - w;
    }
    if (y < this.canvas.offsetTop) {
      y = this.canvas.offsetTop;
    }
    if (y + h > this.canvas.offsetTop + this.canvas.offsetHeight) {
      y = this.canvas.offsetTop + this.canvas.offsetHeight - h;
    }
    return {
      x: x,
      y: y
    };
  };

  DrawArea.prototype.snap_to_grid = function(x, y, dx, dy) {
    var canvasOffsetX, canvasOffsetY, snapX, snapY;
    if (dx === void 0) {
      dx = 0;
    }
    if (dy === void 0) {
      dy = 0;
    }
    snapX = Math.round((x - dx) / this.app_config.grid_step);
    snapY = Math.round((y - dy) / this.app_config.grid_step);
    canvasOffsetY = this.canvas.offsetTop % this.app_config.grid_step;
    canvasOffsetX = this.canvas.offsetLeft % this.app_config.grid_step;
    return {
      canvas_x: snapX * this.app_config.grid_step,
      canvas_y: snapY * this.app_config.grid_step,
      newClientX: (snapX * this.app_config.grid_step) + canvasOffsetX,
      newClientY: (snapY * this.app_config.grid_step) + canvasOffsetY
    };
  };

  return DrawArea;

})();

Draw_area_event_handlers = (function() {
  function Draw_area_event_handlers(app) {
    this.app = app;
    this.set_cursor_move = __bind(this.set_cursor_move, this);
    this.make_backLight = __bind(this.make_backLight, this);
    this.get_on_mouse_hover_element = __bind(this.get_on_mouse_hover_element, this);
    this.unselect_tool_buttons = __bind(this.unselect_tool_buttons, this);
    this.stop_execute_user_actions = __bind(this.stop_execute_user_actions, this);
    this.execute_user_actions = __bind(this.execute_user_actions, this);
    this.execute_event_handlers = __bind(this.execute_event_handlers, this);
    this.on_mouse_down = __bind(this.on_mouse_down, this);
    this.on_mouse_hover_on_empty_space = __bind(this.on_mouse_hover_on_empty_space, this);
    this.on_can_top_resize = __bind(this.on_can_top_resize, this);
    this.on_can_left_resize = __bind(this.on_can_left_resize, this);
    this.on_can_bottom_resize = __bind(this.on_can_bottom_resize, this);
    this.on_can_right_resize = __bind(this.on_can_right_resize, this);
    this.on_move_element = __bind(this.on_move_element, this);
    this.on_bottom_resize = __bind(this.on_bottom_resize, this);
    this.on_top_resize = __bind(this.on_top_resize, this);
    this.on_right_resize = __bind(this.on_right_resize, this);
    this.on_left_resize = __bind(this.on_left_resize, this);
    this.check_on_move_element = __bind(this.check_on_move_element, this);
    this.check_on_bottom_resize = __bind(this.check_on_bottom_resize, this);
    this.check_on_top_resize = __bind(this.check_on_top_resize, this);
    this.check_on_right_resize = __bind(this.check_on_right_resize, this);
    this.check_on_left_resize = __bind(this.check_on_left_resize, this);
    this.check_on_can_resize = __bind(this.check_on_can_resize, this);
    this.check_on_resize = __bind(this.check_on_resize, this);
    this.check_resize_events = __bind(this.check_resize_events, this);
    this.on_mouse_hover_on_element = __bind(this.on_mouse_hover_on_element, this);
    this.on_tool_move = __bind(this.on_tool_move, this);
    this.on_draw_line = __bind(this.on_draw_line, this);
    this.check_on_draw_line = __bind(this.check_on_draw_line, this);
    this.on_tool_draw_line = __bind(this.on_tool_draw_line, this);
    this.on_tool_delete = __bind(this.on_tool_delete, this);
    this.on_tool_change_color = __bind(this.on_tool_change_color, this);
    this.on_resize = __bind(this.on_resize, this);
    this.on_can_resize = __bind(this.on_can_resize, this);
    this.area_events = {
      on_can_right_resize: false,
      on_can_left_resize: false,
      on_can_bottom_resize: false,
      on_can_top_resize: false,
      on_left_resize: false,
      on_top_resize: false,
      on_right_resize: false,
      on_bottom_resize: false,
      on_resize: false,
      on_can_resize: false,
      on_mouse_hover_on_empty_space: false,
      on_mouse_down: false,
      on_mouse_hover_on_element: false,
      on_move_element: false,
      on_tool_delete: false,
      on_tool_move: false,
      on_tool_change_color: false,
      on_tool_draw_line: false,
      on_draw_line: false
    };
  }

  Draw_area_event_handlers.prototype.on_can_resize = function() {};

  Draw_area_event_handlers.prototype.on_resize = function() {};

  Draw_area_event_handlers.prototype.on_tool_change_color = function() {
    if (this.area_events.on_mouse_down && this.current_element_for_actions !== void 0) {
      return this.current_element_for_actions.obj.border_color = this.app.draw_area.get_selected_color();
    }
  };

  Draw_area_event_handlers.prototype.on_tool_delete = function() {
    if (this.area_events.on_mouse_down && this.current_element_for_actions !== void 0) {
      this.app.schemeData.remove(this.current_element_for_actions.id);
      this.current_element_for_actions = void 0;
      this.area_events.on_mouse_hover_on_element = false;
      this.area_events.on_mouse_hover_on_empty_space = true;
      this.area_events.on_resize = false;
      return this.area_events.on_can_resize = false;
    }
  };

  Draw_area_event_handlers.prototype.on_tool_draw_line = function(e) {
    var c, color, id;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    if (this.area_events.on_mouse_down && this.app.area_map.is_empty_line_coord(c.canvas_x, c.canvas_y) && !this.area_events.on_draw_line) {
      this.area_events.on_draw_line = true;
      id = this.app.schemeData.get_new_id();
      color = this.app.draw_area.get_selected_color();
      this.current_element_for_actions = new SchemeLine(id, [], color, this.app.area_map);
      this.current_element_for_actions.add_coord(c.canvas_x, c.canvas_y);
      this.current_element_for_actions.add_coord(c.canvas_x, c.canvas_y);
      return this.app.schemeData.add_in_begin(id, SchemeLine, this.current_element_for_actions);
    }
  };

  Draw_area_event_handlers.prototype.check_on_draw_line = function(e) {
    if (this.area_events.on_mouse_down) {
      return this.area_events.on_draw_line = true;
    } else {
      return this.area_events.on_draw_line = false;
    }
  };

  Draw_area_event_handlers.prototype.on_draw_line = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    this.current_element_for_actions.get_last_coord().x = c.canvas_x;
    return this.current_element_for_actions.get_last_coord().y = c.canvas_y;
  };

  Draw_area_event_handlers.prototype.on_tool_move = function() {};

  Draw_area_event_handlers.prototype.on_mouse_hover_on_element = function(e) {
    if (!this.area_events.on_resize && !this.area_events.on_draw_line) {
      this.current_element_for_actions = this.get_on_mouse_hover_element(e);
      this.make_backLight(this.current_element_for_actions);
    }
    this.check_resize_events(e);
    if (!this.check_on_can_resize()) {
      this.set_cursor_move();
    }
    this.check_on_move_element(e);
    this.element_has_been_selected = true;
    return this.area_events.on_mouse_hover_on_empty_space = false;
  };

  Draw_area_event_handlers.prototype.check_resize_events = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    if (this.area_events.on_move_element) {
      return;
    }
    this.check_on_left_resize(c.canvas_x);
    this.check_on_top_resize(c.canvas_y);
    this.check_on_bottom_resize(c.canvas_y);
    this.check_on_right_resize(c.canvas_x);
    return this.check_on_resize();
  };

  Draw_area_event_handlers.prototype.check_on_resize = function() {
    if (this.area_events.on_left_resize || this.area_events.on_top_resize || this.area_events.on_bottom_resize || this.area_events.on_right_resize) {
      this.area_events.on_resize = true;
    } else {
      this.area_events.on_resize = false;
    }
    return this.area_events.on_resize;
  };

  Draw_area_event_handlers.prototype.check_on_can_resize = function() {
    if (this.area_events.on_can_right_resize || this.area_events.on_can_bottom_resize || this.area_events.on_can_top_resize || this.area_events.on_can_left_resize) {
      this.area_events.on_can_resize = true;
    } else {
      this.area_events.on_can_resize = false;
    }
    return this.area_events.on_can_resize;
  };

  Draw_area_event_handlers.prototype.check_on_left_resize = function(x) {
    this.area_events.on_can_left_resize = this.current_element_for_actions.obj.is_left_resize(x);
    return this.area_events.on_left_resize = this.area_events.on_left_resize || (this.area_events.on_can_left_resize && this.area_events.on_mouse_down);
  };

  Draw_area_event_handlers.prototype.check_on_right_resize = function(x) {
    this.area_events.on_can_right_resize = this.current_element_for_actions.obj.is_right_resize(x);
    return this.area_events.on_right_resize = this.area_events.on_right_resize || (this.area_events.on_can_right_resize && this.area_events.on_mouse_down);
  };

  Draw_area_event_handlers.prototype.check_on_top_resize = function(y) {
    this.area_events.on_can_top_resize = this.current_element_for_actions.obj.is_top_resize(y);
    return this.area_events.on_top_resize = this.area_events.on_top_resize || (this.area_events.on_can_top_resize && this.area_events.on_mouse_down);
  };

  Draw_area_event_handlers.prototype.check_on_bottom_resize = function(y) {
    this.area_events.on_can_bottom_resize = this.current_element_for_actions.obj.is_bottom_resize(y);
    return this.area_events.on_bottom_resize = this.area_events.on_bottom_resize || (this.area_events.on_can_bottom_resize && this.area_events.on_mouse_down);
  };

  Draw_area_event_handlers.prototype.check_on_move_element = function() {
    if (this.area_events.on_mouse_down && !this.area_events.on_resize && this.area_events.on_tool_move) {
      return this.area_events.on_move_element = true;
    } else {
      return this.area_events.on_move_element = false;
    }
  };

  Draw_area_event_handlers.prototype.on_left_resize = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    return this.current_element_for_actions.obj.resize_left(c.canvas_x);
  };

  Draw_area_event_handlers.prototype.on_right_resize = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    return this.current_element_for_actions.obj.resize_right(c.canvas_x);
  };

  Draw_area_event_handlers.prototype.on_top_resize = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    return this.current_element_for_actions.obj.resize_top(c.canvas_y);
  };

  Draw_area_event_handlers.prototype.on_bottom_resize = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    return this.current_element_for_actions.obj.resize_bottom(c.canvas_y);
  };

  Draw_area_event_handlers.prototype.on_move_element = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX - this.current_element_for_actions.obj.width / 2, e.pageY - this.current_element_for_actions.obj.height / 2);
    this.current_element_for_actions.obj.move(c.canvas_x, c.canvas_y);
    return this.app.update_area();
  };

  Draw_area_event_handlers.prototype.on_can_right_resize = function(e) {
    return $('#' + this.app.app_config.canvas_id)[0].style.cursor = 'col-resize';
  };

  Draw_area_event_handlers.prototype.on_can_bottom_resize = function(e) {
    return $('#' + this.app.app_config.canvas_id)[0].style.cursor = 'row-resize';
  };

  Draw_area_event_handlers.prototype.on_can_left_resize = function(e) {
    return $('#' + this.app.app_config.canvas_id)[0].style.cursor = 'col-resize';
  };

  Draw_area_event_handlers.prototype.on_can_top_resize = function(e) {
    return $('#' + this.app.app_config.canvas_id)[0].style.cursor = 'row-resize';
  };

  Draw_area_event_handlers.prototype.on_mouse_hover_on_empty_space = function(e) {
    $('#' + this.app.app_config.canvas_id)[0].style.cursor = 'default';
    this.area_events.on_mouse_hover_on_empty_space = true;
    if (this.element_has_been_selected) {
      this.app.update_area();
      return this.element_has_been_selected = false;
    }
  };

  Draw_area_event_handlers.prototype.on_mouse_down = function(e) {
    return this.app.update_area();
  };

  Draw_area_event_handlers.prototype.execute_event_handlers = function(e, ui) {
    var event, _ref, _results;
    _ref = this.area_events;
    _results = [];
    for (event in _ref) {
      if (!__hasProp.call(_ref, event)) continue;
      if (this.area_events[event]) {
        _results.push(this[event](e, ui));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Draw_area_event_handlers.prototype.execute_user_actions = function(e) {
    var c;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    this.area_events.on_mouse_hover_on_empty_space = this.app.area_map.is_empty_map_cell(c.map_cell_x, c.map_cell_y);
    this.area_events.on_mouse_hover_on_element = !this.area_events.on_mouse_hover_on_empty_space;
    return this.execute_event_handlers(e);
  };

  Draw_area_event_handlers.prototype.stop_execute_user_actions = function(e) {
    this.area_events.on_move_element = false;
    this.area_events.on_mouse_down = false;
    this.area_events.on_top_resize = false;
    this.area_events.on_right_resize = false;
    this.area_events.on_bottom_resize = false;
    this.area_events.on_left_resize = false;
    this.area_events.on_resize = false;
    return this.area_events.on_draw_line = false;
  };

  Draw_area_event_handlers.prototype.unselect_tool_buttons = function() {
    this.area_events.on_tool_delete = false;
    this.area_events.on_tool_move = false;
    this.area_events.on_tool_change_color = false;
    this.area_events.on_tool_draw_line = false;
    return $('.btn-custom').removeClass('selected-btn');
  };

  Draw_area_event_handlers.prototype.get_on_mouse_hover_element = function(e) {
    var c, idHover;
    c = this.app.draw_area.get_canvas_coords(e.pageX, e.pageY);
    idHover = this.app.area_map.get_cell(c.map_cell_x, c.map_cell_y);
    return this.app.schemeData.get_by_id(idHover);
  };

  Draw_area_event_handlers.prototype.make_backLight = function(element) {
    element.obj.isMouseHover = true;
    this.app.update_area();
    return element.obj.isMouseHover = false;
  };

  Draw_area_event_handlers.prototype.set_cursor_move = function() {
    return $('#' + this.app.app_config.canvas_id)[0].style.cursor = 'move';
  };

  return Draw_area_event_handlers;

})();

EventsHandlerInitializer = (function() {
  function EventsHandlerInitializer(app) {
    this.app = app;
    this.init_event_handlers = __bind(this.init_event_handlers, this);
    this.area_events = new Draw_area_event_handlers(this.app);
    this.init_event_handlers();
  }

  EventsHandlerInitializer.prototype.init_event_handlers = function() {
    $('#' + this.app.app_config.canvas_id).on('mousemove', (function(_this) {
      return function(e) {
        return _this.area_events.execute_user_actions(e);
      };
    })(this));
    $('#canvas').on('mousedown', (function(_this) {
      return function(e) {
        _this.area_events.area_events.on_mouse_down = true;
        return _this.area_events.execute_user_actions(e);
      };
    })(this));
    $('#canvas').on('mouseup', (function(_this) {
      return function(e) {
        return _this.area_events.stop_execute_user_actions(e);
      };
    })(this));
    $((function(_this) {
      return function() {
        return $(_this.app.app_config.class_scheme_element_image).draggable({
          helper: "clone",
          start: function(e, ui) {
            _this.app.draw_area.dragingToSchemeElement = e.srcElement;
            _this.startDx = e.pageX - ui.position.left;
            return _this.startDy = e.pageY - ui.position.top;
          },
          drag: function(e, ui) {
            var img_coords, snapped_coords;
            snapped_coords = _this.app.draw_area.snap_to_grid(e.pageX, e.pageY, _this.startDx, _this.startDy);
            img_coords = _this.app.draw_area.enter_image_in_canvas(snapped_coords.newClientX, snapped_coords.newClientY, ui.helper[0].width, ui.helper[0].height);
            ui.position.left = img_coords.x;
            return ui.position.top = img_coords.y;
          },
          stop: function(e, ui) {
            var c, color, count_conn, elem, id_element, id_scheme, img, newId, r;
            img = ui.helper[0];
            count_conn = 2;
            color = _this.app.draw_area.get_selected_color();
            c = _this.app.draw_area.get_canvas_coords(ui.position.left, ui.position.top);
            newId = _this.app.schemeData.get_new_id();
            r = _this.app.area_map.get_rect_map_range(c.canvas_x, c.canvas_y, img.width, img.height);
            if (_this.app.area_map.is_empty_or_key_map_range(r.fromI, r.toI, r.fromJ, r.toJ, 'newElement')) {
              id_scheme = $(_this.app.app_config.class_paint_scheme_form)[0].getAttribute('name').split('_')[1];
              id_element = img.getAttribute('name').split('_')[1];
              elem = new SchemeElement(newId, c.canvas_x, c.canvas_y, img.width, img.height, count_conn, img, color, _this.app.area_map, "", id_element);
              _this.app.schemeData.add(newId, SchemeElement, elem);
              _this.app.schemeData.load_element_properties(id_element, id_scheme, _this.app.app_config, function(res) {
                return elem.DOMPropertiesList = res;
              });
              return _this.app.update_area();
            }
          }
        });
      };
    })(this));
    $(this.app.app_config.class_save_button).on('click', (function(_this) {
      return function() {
        var scheme_id, scheme_image;
        scheme_id = $(_this.app.app_config.class_paint_scheme_form)[0].getAttribute('name').split('_')[1];
        scheme_image = _this.app.draw_area.get_screen_shot();
        return _this.app.schemeData.save_data_to_server(_this.app.app_config, scheme_id, scheme_image);
      };
    })(this));
    $(this.app.app_config.class_load_button).on('click', (function(_this) {
      return function() {
        _this.app.schemeData.clear();
        _this.app.schemeData.clear_list_properties();
        return _this.app.schemeData.load_data_from_server(_this.app.app_config, _this.app.area_map, function() {
          return _this.app.update_area();
        });
      };
    })(this));
    $('.' + this.app.app_config.class_delete_button).on('click', (function(_this) {
      return function() {
        _this.area_events.unselect_tool_buttons();
        _this.area_events.area_events.on_tool_delete = true;
        return $('.' + _this.app.app_config.class_delete_button).addClass('selected-btn');
      };
    })(this));
    $('.' + this.app.app_config.class_move_button).on('click', (function(_this) {
      return function() {
        _this.area_events.unselect_tool_buttons();
        _this.area_events.area_events.on_tool_move = true;
        return $('.' + _this.app.app_config.class_move_button).addClass('selected-btn');
      };
    })(this));
    $('.' + this.app.app_config.class_draw_line_button).on('click', (function(_this) {
      return function() {
        _this.area_events.unselect_tool_buttons();
        _this.area_events.area_events.on_tool_draw_line = true;
        return $('.' + _this.app.app_config.class_draw_line_button).addClass('selected-btn');
      };
    })(this));
    return $('.' + this.app.app_config.class_change_color_button).on('click', (function(_this) {
      return function() {
        _this.area_events.unselect_tool_buttons();
        _this.area_events.area_events.on_tool_change_color = true;
        return $('.' + _this.app.app_config.class_change_color_button).addClass('selected-btn');
      };
    })(this));
  };

  return EventsHandlerInitializer;

})();

this.app_config = {
  class_scheme_element_image: '.scheme-element-image',
  class_scheme_element_properties: 'scheme-element-properties',
  class_scheme_element_properties_block: 'properties-area',
  class_property_list: 'properties-list',
  class_user_element_name: 'user-element-name',
  classElementName: 'element-name',
  class_count_element_connections: 'count-connections',
  class_delete_button: 'delete-btn',
  class_move_button: 'move-btn',
  class_draw_line_button: 'draw-line-btn',
  class_change_color_button: 'change-color-btn',
  class_paint_scheme_form: '.paint-scheme-form',
  class_color_selector: '.color-selector',
  class_save_button: '.save-button',
  class_load_button: '.load-button',
  id_paint_form: '1',
  grid_step: '10',
  canvas_id: 'canvas',
  canvas_width: '600',
  canvas_height: '400',
  color_on_hover: 'blue',
  url_for_AJAX_save_scheme: 'http://localhost:3000/ajax',
  url_to_AJAX_load_properties: 'http://localhost:3000/ajax'
};

$(document).ready((function(_this) {
  return function() {
    var app_control;
    app_control = new AppControl(_this.app_config);
    app_control.run();
    return app_control.load_scheme_data();
  };
})(this));

SchemeData = (function() {
  function SchemeData() {
    this.is_unique_id = __bind(this.is_unique_id, this);
    this.get_new_id = __bind(this.get_new_id, this);
    this.get_position_in_array = __bind(this.get_position_in_array, this);
    this.get_by_id = __bind(this.get_by_id, this);
    this.last_component = __bind(this.last_component, this);
    this.count_component = __bind(this.count_component, this);
    this.set_RoR_header_for_AJAX = __bind(this.set_RoR_header_for_AJAX, this);
    this.AJAX_query = __bind(this.AJAX_query, this);
    this.save_data_to_server = __bind(this.save_data_to_server, this);
    this.load_data_from_server = __bind(this.load_data_from_server, this);
    this.load_element_properties = __bind(this.load_element_properties, this);
    this.properties_to_list_on_page = __bind(this.properties_to_list_on_page, this);
    this.get_element_properties = __bind(this.get_element_properties, this);
    this.to_AJAX_data = __bind(this.to_AJAX_data, this);
    this.add_from_AJAX_data = __bind(this.add_from_AJAX_data, this);
    this.clear_list_properties = __bind(this.clear_list_properties, this);
    this.remove_DOM_elem_of_properties = __bind(this.remove_DOM_elem_of_properties, this);
    this.remove = __bind(this.remove, this);
    this.clear = __bind(this.clear, this);
    this.add_in_begin = __bind(this.add_in_begin, this);
    this.add = __bind(this.add, this);
    this.list_components = [];
    this.set_RoR_header_for_AJAX();
  }

  SchemeData.prototype.add = function(id, type, obj) {
    return this.list_components.push({
      id: id,
      type: this.get_function_name(type),
      obj: obj
    });
  };

  SchemeData.prototype.add_in_begin = function(id, type, obj) {
    return this.list_components.unshift({
      id: id,
      type: this.get_function_name(type),
      obj: obj
    });
  };

  SchemeData.prototype.clear = function() {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.list_components.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.list_components[i].obj.remove_from_map();
    }
    return this.list_components = [];
  };

  SchemeData.prototype.remove = function(id) {
    var pos;
    pos = this.get_position_in_array(id);
    if (pos !== void 0) {
      this.list_components[pos].obj.remove_from_map();
      this.remove_DOM_elem_of_properties(this.list_components[pos].obj.DOMPropertiesList);
      return this.list_components.splice(pos, 1);
    }
  };

  SchemeData.prototype.remove_DOM_elem_of_properties = function(elem) {
    return $('.' + app_config.class_scheme_element_properties_block)[0].removeChild(elem);
  };

  SchemeData.prototype.clear_list_properties = function() {
    return $('.' + app_config.class_scheme_element_properties_block)[0].innerHTML = '';
  };

  SchemeData.prototype.add_from_AJAX_data = function(response_data, area_map, app_config) {
    var i, id_scheme, obj, obj_data, type, type_initializer, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = response_data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      type = window[response_data[i].type];
      type_initializer = window[response_data[i].type].prototype.from_database_data;
      id_scheme = $(app_config.class_paint_scheme_form)[0].getAttribute('name').split('_')[1];
      obj_data = response_data[i].obj;
      obj_data.id = this.get_new_id();
      obj_data.area_map = area_map;
      obj = type_initializer(obj_data);
      if (obj_data.element_id) {
        this.load_element_properties(obj_data.element_id, id_scheme, app_config, (function(_this) {
          return function(req) {
            return obj.DOMPropertiesList = req;
          };
        })(this));
      }
      _results.push(this.add(obj_data.id, type, obj));
    }
    return _results;
  };

  SchemeData.prototype.get_function_name = function(fn) {
    return fn.toString().match(/function ([^(]*)\(/)[1];
  };

  SchemeData.prototype.to_AJAX_data = function(scheme_id, scheme_image, app_config) {
    var arr, i, id, obj_data, obj_prop, type, _i, _ref;
    arr = [];
    for (i = _i = 0, _ref = this.list_components.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      id = this.list_components[i].id;
      type = this.list_components[i].type;
      obj_data = this.list_components[i].obj.to_database_data();
      obj_prop = this.get_element_properties(this.list_components[i].obj);
      arr.push({
        id: id,
        type: type,
        obj_data: obj_data,
        obj_properties: obj_prop
      });
    }
    return {
      scheme_id: scheme_id,
      scheme_image: scheme_image,
      elements: arr
    };
  };

  SchemeData.prototype.get_element_properties = function(obj) {
    var i, inputs, properties, _i, _ref;
    inputs = $(obj.DOMPropertiesList).find('input');
    properties = [];
    for (i = _i = 0, _ref = inputs.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      properties.push({
        id: inputs[i].getAttribute('property_id'),
        name: inputs[i].getAttribute('property_name'),
        value: inputs[i].value
      });
    }
    return properties;
  };

  SchemeData.prototype.properties_to_list_on_page = function(response, app_config) {
    var countConn, elementName, i, inp, item, label, li, list, userName, _i, _ref;
    item = document.createElement('div');
    item.classList.add(app_config.class_scheme_element_properties);
    userName = document.createElement('h3');
    userName.classList.add(app_config.class_user_element_name);
    userName.innerHTML = response.data.userName;
    elementName = document.createElement('p');
    elementName.classList.add(app_config.classElementName);
    elementName.innerHTML = response.data.name;
    countConn = document.createElement('p');
    countConn.classList.add(app_config.class_count_element_connections);
    countConn.innerHTML = response.data.connections;
    list = document.createElement('ul');
    list.classList.add(app_config.class_property_list);
    for (i = _i = 0, _ref = response.data.properties.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      li = document.createElement('li');
      label = document.createElement('label');
      label.innerHTML = response.data.properties[i].name;
      inp = document.createElement('input');
      inp.type = 'text';
      inp.value = response.data.properties[i].value;
      inp.setAttribute('property_id', response.data.properties[i].id);
      inp.setAttribute('property_name', response.data.properties[i].name);
      label.appendChild(inp);
      li.appendChild(label);
      list.appendChild(li);
    }
    item.appendChild(userName);
    item.appendChild(elementName);
    item.appendChild(countConn);
    item.appendChild(list);
    $('.' + app_config.class_scheme_element_properties_block)[0].appendChild(item);
    return item;
  };

  SchemeData.prototype.load_element_properties = function(element_id, scheme_id, app_config, on_success) {
    var data, new_div, url;
    url = app_config.url_to_AJAX_load_properties;
    new_div = '';
    data = {
      element_id: element_id,
      scheme_id: scheme_id
    };
    this.AJAX_query(url, "load_properties", data, (function(_this) {
      return function(res) {
        new_div = _this.properties_to_list_on_page(res, app_config);
        return on_success(new_div);
      };
    })(this));
    return new_div;
  };

  SchemeData.prototype.load_data_from_server = function(app_config, area_map, on_success) {
    var id_scheme, url;
    url = app_config.url_to_AJAX_load_properties;
    id_scheme = $(app_config.class_paint_scheme_form)[0].getAttribute('name').split('_')[1];
    return this.AJAX_query(url, "load_scheme", {
      scheme_id: id_scheme
    }, (function(_this) {
      return function(res) {
        _this.add_from_AJAX_data(res.data, area_map, app_config);
        return on_success(res);
      };
    })(this));
  };

  SchemeData.prototype.save_data_to_server = function(app_config, scheme_id, scheme_image) {
    var data;
    data = this.to_AJAX_data(scheme_id, scheme_image, app_config);
    return this.AJAX_query(app_config.url_for_AJAX_save_scheme, "save_scheme", data, (function(_this) {
      return function() {};
    })(this));
  };

  SchemeData.prototype.AJAX_query = function(url, query_name, data, on_success) {
    return $.ajax({
      type: 'POST',
      url: url,
      async: false,
      data: "query=" + query_name + "; data=" + JSON.stringify(data) + "; ",
      success: (function(_this) {
        return function(res) {
          console.log(res);
          return on_success(res);
        };
      })(this)
    });
  };

  SchemeData.prototype.set_RoR_header_for_AJAX = function() {
    return $.ajaxSetup({
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }
    });
  };

  SchemeData.prototype.count_component = function() {
    return this.list_components.length;
  };

  SchemeData.prototype.last_component = function() {
    return this.list_components[this.list_components.length - 1];
  };

  SchemeData.prototype.get_by_id = function(id) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.list_components.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.list_components[i].id === id) {
        return this.list_components[i];
      }
    }
    return void 0;
  };

  SchemeData.prototype.get_position_in_array = function(id) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.list_components.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.list_components[i].id === id) {
        return i;
      }
    }
    return void 0;
  };

  SchemeData.prototype.get_new_id = function() {
    var id;
    id = this.list_components.length + 1;
    while (!this.is_unique_id(id)) {
      id++;
    }
    return id;
  };

  SchemeData.prototype.is_unique_id = function(id) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.list_components.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.list_components[i].id === id) {
        return false;
      }
    }
    return true;
  };

  return SchemeData;

})();

SchemeElement = (function() {
  SchemeElement.isMouseHover = false;

  function SchemeElement(id, x, y, width, height, countOfConnections, image, border_color, area_map, DOMPropertiesList, element_id) {
    this.id = id;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.countOfConnections = countOfConnections;
    this.image = image;
    this.border_color = border_color;
    this.area_map = area_map;
    this.DOMPropertiesList = DOMPropertiesList;
    this.element_id = element_id;
    this.move = __bind(this.move, this);
    this.resize_right = __bind(this.resize_right, this);
    this.resize_left = __bind(this.resize_left, this);
    this.resize_top = __bind(this.resize_top, this);
    this.resize_bottom = __bind(this.resize_bottom, this);
    this.validate_range = __bind(this.validate_range, this);
    this.validate_new_size = __bind(this.validate_new_size, this);
    this.validate_coords = __bind(this.validate_coords, this);
    this.is_right_resize = __bind(this.is_right_resize, this);
    this.is_left_resize = __bind(this.is_left_resize, this);
    this.is_bottom_resize = __bind(this.is_bottom_resize, this);
    this.is_top_resize = __bind(this.is_top_resize, this);
    this.remove_from_map = __bind(this.remove_from_map, this);
    this.place_to_map = __bind(this.place_to_map, this);
    this.get_color_by_mouse_hover = __bind(this.get_color_by_mouse_hover, this);
    this.draw_shadow_rect = __bind(this.draw_shadow_rect, this);
    this.get_img_height = __bind(this.get_img_height, this);
    this.get_img_width = __bind(this.get_img_width, this);
    this.draw = __bind(this.draw, this);
    this.from_database_data = __bind(this.from_database_data, this);
    this.to_database_data = __bind(this.to_database_data, this);
    this.offset_border_resizeble = 3;
    this.width = Math.round(this.width / this.area_map.step) * this.area_map.step;
    this.height = Math.round(this.height / this.area_map.step) * this.area_map.step;
    this.place_to_map();
  }

  SchemeElement.prototype.to_database_data = function() {
    return {
      x: this.x,
      y: this.y,
      width: this.width,
      height: this.height,
      color: this.border_color,
      CountOfConnections: this.CountOfConnections,
      element_id: this.element_id
    };
  };

  SchemeElement.prototype.from_database_data = function(data) {
    var image;
    image = document.createElement("IMG");
    image.src = data.image;
    return new SchemeElement(data.id, data.x, data.y, data.width, data.height, data.CountOfConnections, image, data.color, data.area_map, "", data.element_id);
  };

  SchemeElement.prototype.draw = function(ctx, color_on_hover) {
    var avgX, avgY, color, h, w;
    color = this.get_color_by_mouse_hover(this.border_color, color_on_hover);
    this.draw_shadow_rect(this.x, this.y, this.width, this.height, this.border_color, color, ctx);
    w = this.get_img_width(this.image.width, this.width);
    h = this.get_img_height(this.image.height, this.height);
    avgX = this.x + Math.round((this.width - w) / 2);
    avgY = this.y + Math.round((this.height - h) / 2);
    ctx.shadowBlur = 0;
    return ctx.drawImage(this.image, avgX, avgY, w, h);
  };

  SchemeElement.prototype.get_img_width = function(img_w, w) {
    if (img_w < w) {
      return img_w;
    } else {
      return w;
    }
  };

  SchemeElement.prototype.get_img_height = function(img_h, h) {
    if (img_h < h) {
      return img_h;
    } else {
      return h;
    }
  };

  SchemeElement.prototype.draw_shadow_rect = function(x, y, w, h, color, shadow_color, ctx) {
    ctx.beginPath();
    ctx.shadowColor = shadow_color;
    ctx.shadowBlur = 3;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    ctx.fillStyle = color;
    ctx.fillRect(x, y, w, h);
    ctx.closePath();
    return ctx.fill();
  };

  SchemeElement.prototype.get_color_by_mouse_hover = function(color, hover_color) {
    if (this.isMouseHover) {
      return hover_color;
    } else {
      return color;
    }
  };

  SchemeElement.prototype.place_to_map = function() {
    var i, j, startI, startJ, toI, toJ, _i, _results;
    startJ = Math.round(this.x / this.area_map.step);
    startI = Math.round(this.y / this.area_map.step);
    toJ = Math.round(this.width / this.area_map.step) + startJ;
    toI = Math.round(this.height / this.area_map.step) + startI;
    _results = [];
    for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
          _results1.push(this.area_map.set_cell(i, j, this.id));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  SchemeElement.prototype.remove_from_map = function() {
    var startI, startJ, toI, toJ;
    startJ = Math.round(this.x / this.area_map.step);
    startI = Math.round(this.y / this.area_map.step);
    toJ = Math.round(this.width / this.area_map.step) + startJ;
    toI = Math.round(this.height / this.area_map.step) + startI;
    return this.area_map.clear_range(startI, toI, startJ, toJ);
  };

  SchemeElement.prototype.is_top_resize = function(y) {
    if (this.y < y + this.offset_border_resizeble && this.y > y - this.offset_border_resizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.is_bottom_resize = function(y) {
    if (this.y + this.height < y + this.offset_border_resizeble && this.y + this.height > y - this.offset_border_resizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.is_left_resize = function(x) {
    if (this.x < x + this.offset_border_resizeble && this.x > x - this.offset_border_resizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.is_right_resize = function(x) {
    if (this.x + this.width < x + this.offset_border_resizeble && this.x + this.width > x - this.offset_border_resizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.validate_coords = function(x, y) {
    if (this.area_map.validate_map_indexes(y / this.area_map.step, x / this.area_map.step) && x + this.width <= this.area_map.width && y + this.height <= this.area_map.height) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.validate_new_size = function(new_size) {
    if (new_size < this.area_map.step) {
      return false;
    } else {
      return true;
    }
  };

  SchemeElement.prototype.validate_range = function(r) {
    if (this.area_map.is_empty_or_key_map_range(r.fromI, r.toI, r.fromJ, r.toJ, this.id)) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.resize_bottom = function(new_y) {
    var newH, r;
    new_y = Math.round(new_y / this.area_map.step) * this.area_map.step;
    newH = new_y - this.y;
    r = this.area_map.get_rect_map_range(this.x, this.y, this.width, newH);
    if (!(this.validate_new_size(newH) && this.validate_range(r))) {
      return false;
    }
    this.remove_from_map();
    this.height = newH;
    return this.place_to_map();
  };

  SchemeElement.prototype.resize_top = function(new_y) {
    var newH, r;
    new_y = Math.round(new_y / this.area_map.step) * this.area_map.step;
    newH = this.y + this.height - new_y;
    r = this.area_map.get_rect_map_range(this.x, new_y, this.width, newH);
    if (!(this.validate_new_size(newH) && this.validate_range(r))) {
      return false;
    }
    this.remove_from_map();
    this.height = newH;
    this.y = new_y;
    return this.place_to_map();
  };

  SchemeElement.prototype.resize_left = function(new_x) {
    var new_w, r;
    new_x = Math.round(new_x / this.area_map.step) * this.area_map.step;
    new_w = this.x + this.width - new_x;
    r = this.area_map.get_rect_map_range(new_x, this.y, new_w, this.height);
    if (!(this.validate_new_size(new_w) && this.validate_range(r))) {
      return false;
    }
    this.remove_from_map();
    this.width = new_w;
    this.x = new_x;
    return this.place_to_map();
  };

  SchemeElement.prototype.resize_right = function(new_x) {
    var newW, r;
    new_x = Math.round(new_x / this.area_map.step) * this.area_map.step;
    newW = new_x - this.x;
    r = this.area_map.get_rect_map_range(this.x, this.y, newW, this.height);
    if (!(this.validate_new_size(newW) && this.validate_range(r))) {
      return false;
    }
    this.remove_from_map();
    this.width = newW;
    return this.place_to_map();
  };

  SchemeElement.prototype.move = function(new_x, new_y) {
    var r;
    new_x = Math.round(new_x / this.area_map.step) * this.area_map.step;
    new_y = Math.round(new_y / this.area_map.step) * this.area_map.step;
    r = this.area_map.get_rect_map_range(new_x, new_y, this.width, this.height);
    if (!(this.validate_coords(new_x, new_y) && this.validate_range(r))) {
      return false;
    }
    this.remove_from_map();
    this.x = new_x;
    this.y = new_y;
    return this.place_to_map();
  };

  return SchemeElement;

})();

SchemeLine = (function() {
  SchemeLine.isMouseHover = false;

  function SchemeLine(id, coords, border_color, area_map) {
    this.id = id;
    this.coords = coords;
    this.border_color = border_color;
    this.area_map = area_map;
    this.remove_from_map = __bind(this.remove_from_map, this);
    this.move = __bind(this.move, this);
    this.resize_right = __bind(this.resize_right, this);
    this.resize_left = __bind(this.resize_left, this);
    this.resize_top = __bind(this.resize_top, this);
    this.resize_bottom = __bind(this.resize_bottom, this);
    this.validate_range = __bind(this.validate_range, this);
    this.validate_new_size = __bind(this.validate_new_size, this);
    this.validate_coords = __bind(this.validate_coords, this);
    this.is_right_resize = __bind(this.is_right_resize, this);
    this.is_left_resize = __bind(this.is_left_resize, this);
    this.is_bottom_resize = __bind(this.is_bottom_resize, this);
    this.is_top_resize = __bind(this.is_top_resize, this);
    this.get_color_by_mouse_hover = __bind(this.get_color_by_mouse_hover, this);
    this.get_last_coord = __bind(this.get_last_coord, this);
    this.add_coord = __bind(this.add_coord, this);
    this.draw_path = __bind(this.draw_path, this);
    this.draw_shadow_circle = __bind(this.draw_shadow_circle, this);
    this.draw = __bind(this.draw, this);
    this.from_database_data = __bind(this.from_database_data, this);
    this.to_database_data = __bind(this.to_database_data, this);
    this.offset_border_resizeble = 3;
  }

  SchemeLine.prototype.to_database_data = function() {
    return {
      coords: JSON.stringify(this.coords),
      color: this.border_color
    };
  };

  SchemeLine.prototype.from_database_data = function(data) {
    return new SchemeLine(data.id, JSON.parse(data.coords), data.color, data.areaMap);
  };

  SchemeLine.prototype.draw = function(ctx, color_on_hover) {
    var color;
    color = this.get_color_by_mouse_hover(this.border_color, color_on_hover);
    return this.draw_path(this.coords, color, ctx);
  };

  SchemeLine.prototype.draw_shadow_circle = function(x, y, r, shadow_color, color, ctx) {
    ctx.shadowColor = color;
    ctx.shadowBlur = 3;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    ctx.fillStyle = color;
    return ctx.arc(x, y, r, 0, 360, true);
  };

  SchemeLine.prototype.draw_path = function(coords, color, ctx) {
    var i, _i, _ref;
    ctx.beginPath();
    for (i = _i = 0, _ref = coords.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      ctx.moveTo(coords[i].x, coords[i].y);
      ctx.lineTo(coords[i + 1].x, coords[i + 1].y);
    }
    ctx.lineWidth = 2;
    ctx.strokeStyle = color;
    ctx.lineCap = "butt";
    return ctx.stroke();
  };

  SchemeLine.prototype.add_coord = function(x, y) {
    x = this.area_map.round_coord_tp_grid_step(x);
    y = this.area_map.round_coord_tp_grid_step(y);
    if (this.area_map.is_empty_line_coord(x, y)) {
      this.coords.push({
        x: x,
        y: y
      });
      return true;
    } else {
      return false;
    }
  };

  SchemeLine.prototype.get_last_coord = function() {
    if (this.coords.length >= 0) {
      return this.coords[this.coords.length - 1];
    } else {
      return void 0;
    }
  };

  SchemeLine.prototype.get_color_by_mouse_hover = function(color, hover_color) {
    if (this.isMouseHover) {
      return hover_color;
    } else {
      return color;
    }
  };

  SchemeLine.prototype.is_top_resize = function(y) {};

  SchemeLine.prototype.is_bottom_resize = function(y) {};

  SchemeLine.prototype.is_left_resize = function(x) {};

  SchemeLine.prototype.is_right_resize = function(x) {};

  SchemeLine.prototype.validate_coords = function(x, y) {};

  SchemeLine.prototype.validate_new_size = function(new_size) {};

  SchemeLine.prototype.validate_range = function(r) {};

  SchemeLine.prototype.resize_bottom = function(new_y) {};

  SchemeLine.prototype.resize_top = function(new_y) {};

  SchemeLine.prototype.resize_left = function(new_x) {};

  SchemeLine.prototype.resize_right = function(new_x) {};

  SchemeLine.prototype.move = function(new_x, new_y) {};

  SchemeLine.prototype.remove_from_map = function() {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.coords.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.area_map.clear_coord_hash(this.coords[i].x, this.coords[i].y));
    }
    return _results;
  };

  return SchemeLine;

})();
