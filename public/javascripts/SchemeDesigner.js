// Generated by CoffeeScript 1.8.0
(function() {
  var AppControl, AreaBuffer, AreaMap, DrawArea, EventsHandlerInitializer, SchemeData, SchemeElement, SchemeLine,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  AppControl = (function() {
    function AppControl(appConfig) {
      this.appConfig = appConfig;
      this.Run = __bind(this.Run, this);
      this.DrawImageData = __bind(this.DrawImageData, this);
      this.BufferedDraw = __bind(this.BufferedDraw, this);
      this.ClearBuffer = __bind(this.ClearBuffer, this);
      this.InitBuffer = __bind(this.InitBuffer, this);
      this.InitSchemeData = __bind(this.InitSchemeData, this);
      this.InitEventHandlers = __bind(this.InitEventHandlers, this);
      this.UpdateArea = __bind(this.UpdateArea, this);
      this.drawingBufferedGrid = __bind(this.drawingBufferedGrid, this);
      this.InitDrawingArea = __bind(this.InitDrawingArea, this);
    }

    AppControl.prototype.InitDrawingArea = function() {
      this.drawingArea = new DrawArea(this.appConfig);
      this.areaMap = new AreaMap(this.appConfig.canvasWidth, this.appConfig.canvasHeight, this.appConfig.gridStep);
      return $(this.appConfig.classPaintSchemeForm).addClass('noselect');
    };

    AppControl.prototype.drawingBufferedGrid = function() {
      return this.drawingArea.DrawGridSnap(this.appConfig.gridStep);
    };

    AppControl.prototype.UpdateArea = function() {
      this.BufferedDraw('grid', this.drawingBufferedGrid, 0, 0, this.appConfig.canvasWidth, this.appConfig.canvasHeight, this.drawingArea.context);
      return this.drawingArea.DrawSchemeData(this.schemeData.listComponents);
    };

    AppControl.prototype.InitEventHandlers = function() {
      return this.EventsHanlerInitializer = new EventsHandlerInitializer(this);
    };

    AppControl.prototype.InitSchemeData = function() {
      return this.schemeData = new SchemeData();
    };

    AppControl.prototype.InitBuffer = function() {
      return this.bufferArea = new AreaBuffer();
    };

    AppControl.prototype.ClearBuffer = function(key) {
      return this.bufferArea.Remove(key);
    };

    AppControl.prototype.BufferedDraw = function(key, drawFunct, x, y, w, h, ctx) {
      var b, img;
      b = this.bufferArea.GetByKey(key);
      if (b !== void 0) {
        return this.DrawImageData(b.image, b.x, b.y, ctx);
      } else {
        drawFunct();
        img = ctx.getImageData(x, y, w, h);
        return this.bufferArea.Add(key, img, x, y);
      }
    };

    AppControl.prototype.DrawImageData = function(image, dx, dy, ctx) {
      return ctx.putImageData(image, dx, dy);
    };

    AppControl.prototype.Run = function() {
      this.InitBuffer();
      this.InitSchemeData();
      this.InitDrawingArea();
      this.InitEventHandlers();
      return this.UpdateArea();
    };

    return AppControl;

  })();

  AreaBuffer = (function() {
    function AreaBuffer() {
      this.Remove = __bind(this.Remove, this);
      this.Update = __bind(this.Update, this);
      this.Add = __bind(this.Add, this);
      this.GetPositionInArr = __bind(this.GetPositionInArr, this);
      this.GetByKey = __bind(this.GetByKey, this);
      this.bufferArray = __bind(this.bufferArray, this);
      this.bufferArray = new Array();
    }

    AreaBuffer.prototype.bufferArray = function() {
      return this.bufferArray;
    };

    AreaBuffer.prototype.GetByKey = function(key) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.bufferArray.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.bufferArray[i].key === key) {
          return this.bufferArray[i];
        }
      }
      return void 0;
    };

    AreaBuffer.prototype.GetPositionInArr = function(key) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.bufferArray.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.bufferArray[i].key === key) {
          return i;
        }
      }
      return void 0;
    };

    AreaBuffer.prototype.Add = function(key, image, x, y) {
      this.bufferArray.push({
        key: key,
        image: image,
        x: x,
        y: y
      });
      return this.bufferArray.length;
    };

    AreaBuffer.prototype.Update = function(key, image) {
      return this.GetByKey(key).image = image;
    };

    AreaBuffer.prototype.Remove = function(key) {
      var pos;
      pos = this.GetPositionInArr(key);
      if (pos !== void 0) {
        return this.bufferArray.splice(pos, 1);
      }
    };

    return AreaBuffer;

  })();

  AreaMap = (function() {
    function AreaMap(width, height, step) {
      var i, _i, _ref;
      this.width = width;
      this.height = height;
      this.step = step;
      this.GetRectMapRange = __bind(this.GetRectMapRange, this);
      this.ClearRange = __bind(this.ClearRange, this);
      this.IsEmptyMapCell = __bind(this.IsEmptyMapCell, this);
      this.IsEmptyOrKeyMapRange = __bind(this.IsEmptyOrKeyMapRange, this);
      this.ValidateMapIndexes = __bind(this.ValidateMapIndexes, this);
      this.SetCell = __bind(this.SetCell, this);
      this.GetCellByCoords = __bind(this.GetCellByCoords, this);
      this.GetCell = __bind(this.GetCell, this);
      this.map = new Array(Math.round(this.height / this.step) + 1);
      for (i = _i = 0, _ref = this.map.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.map[i] = new Array(this.width / this.step + 1);
      }
    }

    AreaMap.prototype.GetCell = function(i, j) {
      if (this.ValidateMapIndexes(i, j)) {
        return this.map[i][j];
      }
    };

    AreaMap.prototype.GetCellByCoords = function(x, y) {
      var i, j;
      j = Math.round(x / this.step);
      i = Math.round(y / this.step);
      if (this.ValidateMapIndexes(i, j)) {
        return this.map[i][j];
      } else {
        return void 0;
      }
    };

    AreaMap.prototype.SetCell = function(i, j, value) {
      if (this.ValidateMapIndexes(i, j)) {
        return this.map[i][j] = value;
      }
    };

    AreaMap.prototype.ValidateMapIndexes = function(i, j) {
      if (i <= this.map.length && i >= 0) {
        if (j <= this.map[0].length && j >= 0) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    AreaMap.prototype.IsEmptyOrKeyMapRange = function(startI, toI, startJ, toJ, key) {
      var i, j, _i, _j;
      for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
        for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
          if (this.map[i][j] !== void 0 && this.map[i][j] !== key) {
            return false;
          }
        }
      }
      return true;
    };

    AreaMap.prototype.IsEmptyMapCell = function(i, j) {
      if (this.ValidateMapIndexes(i, j)) {
        return this.map[i][j] === void 0;
      }
    };

    AreaMap.prototype.ClearRange = function(startI, toI, startJ, toJ) {
      var i, j, _i, _j;
      if (this.ValidateMapIndexes(startI, startJ) && this.ValidateMapIndexes(toI, toJ)) {
        for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
          for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
            this.map[i][j] = void 0;
          }
        }
        return true;
      } else {
        throw "lol";
        return false;
      }
    };

    AreaMap.prototype.GetRectMapRange = function(x, y, w, h) {
      return {
        fromI: Math.round(y / this.step),
        toI: Math.round((y + h) / this.step),
        fromJ: Math.round(x / this.step),
        toJ: Math.round((x + w) / this.step)
      };
    };

    return AreaMap;

  })();

  DrawArea = (function() {
    function DrawArea(appConfig) {
      this.appConfig = appConfig;
      this.SnapToGrid = __bind(this.SnapToGrid, this);
      this.EnterImageInCanvas = __bind(this.EnterImageInCanvas, this);
      this.GetCanvasCoords = __bind(this.GetCanvasCoords, this);
      this.DrawSchemeData = __bind(this.DrawSchemeData, this);
      this.GetSelectedColor = __bind(this.GetSelectedColor, this);
      this.DrawGridSnap = __bind(this.DrawGridSnap, this);
      this.DrawBackground = __bind(this.DrawBackground, this);
      this.canvas = document.getElementById(this.appConfig.canvasId);
      this.canvas.height = this.appConfig.canvasHeight;
      this.canvas.width = this.appConfig.canvasWidth;
      this.context = this.canvas.getContext("2d");
    }

    DrawArea.prototype.DrawBackground = function() {
      this.context.beginPath();
      this.context.fillStyle = 'rgba( 200, 255, 255, 1 )';
      this.context.rect(0, 0, this.canvas.width, this.canvas.height);
      this.context.closePath();
      return this.context.fill();
    };

    DrawArea.prototype.DrawGridSnap = function(step) {
      var i, j, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.canvas.width / step; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.canvas.height / step; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            this.context.beginPath();
            this.context.arc(i * step, j * step, 1, 0, 2 * Math.PI);
            this.context.fillStyle = 'blue';
            this.context.closePath();
            _results1.push(this.context.fill());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    DrawArea.prototype.GetSelectedColor = function() {
      return $('#' + this.appConfig.idPaintForm + ' ' + this.appConfig.classColorSelector)[0].value;
    };

    DrawArea.prototype.DrawSchemeData = function(schemeData) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = schemeData.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(schemeData[i].obj.Draw(this.context, this.appConfig.colorOnHover));
      }
      return _results;
    };

    DrawArea.prototype.GetCanvasCoords = function(mouseX, mouseY) {
      var c;
      c = this.SnapToGrid(mouseX - this.canvas.offsetLeft, mouseY - this.canvas.offsetTop);
      return {
        canvasX: c.canvasX,
        canvasY: c.canvasY,
        mapCellX: Math.round(c.canvasY / this.appConfig.gridStep),
        mapCellY: Math.round(c.canvasX / this.appConfig.gridStep)
      };
    };

    DrawArea.prototype.EnterImageInCanvas = function(x, y, w, h) {
      if (x < this.canvas.offsetLeft) {
        x = this.canvas.offsetLeft;
      }
      if (x + w > this.canvas.offsetLeft + this.canvas.offsetWidth) {
        x = this.canvas.offsetLeft + this.canvas.offsetWidth - w;
      }
      if (y < this.canvas.offsetTop) {
        y = this.canvas.offsetTop;
      }
      if (y + h > this.canvas.offsetTop + this.canvas.offsetHeight) {
        y = this.canvas.offsetTop + this.canvas.offsetHeight - h;
      }
      return {
        x: x,
        y: y
      };
    };

    DrawArea.prototype.SnapToGrid = function(x, y, dx, dy) {
      var canvasOffsetX, canvasOffsetY, snapX, snapY;
      if (dx === void 0) {
        dx = 0;
      }
      if (dy === void 0) {
        dy = 0;
      }
      snapX = Math.round((x - dx) / this.appConfig.gridStep);
      snapY = Math.round((y - dy) / this.appConfig.gridStep);
      canvasOffsetY = this.canvas.offsetTop % this.appConfig.gridStep;
      canvasOffsetX = this.canvas.offsetLeft % this.appConfig.gridStep;
      return {
        canvasX: snapX * this.appConfig.gridStep,
        canvasY: snapY * this.appConfig.gridStep,
        newClientX: (snapX * this.appConfig.gridStep) + canvasOffsetX,
        newClientY: (snapY * this.appConfig.gridStep) + canvasOffsetY
      };
    };

    return DrawArea;

  })();

  EventsHandlerInitializer = (function() {
    function EventsHandlerInitializer(app) {
      this.app = app;
      this.InitEventHandlers = __bind(this.InitEventHandlers, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.onMouseHoverOnEmptySpace = __bind(this.onMouseHoverOnEmptySpace, this);
      this.onCanTopResize = __bind(this.onCanTopResize, this);
      this.onCanLeftResize = __bind(this.onCanLeftResize, this);
      this.onCanBottomResize = __bind(this.onCanBottomResize, this);
      this.onCanRightResize = __bind(this.onCanRightResize, this);
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMoveElement = __bind(this.onMoveElement, this);
      this.onResize = __bind(this.onResize, this);
      this.onBottomResize = __bind(this.onBottomResize, this);
      this.onTopResize = __bind(this.onTopResize, this);
      this.onRightResize = __bind(this.onRightResize, this);
      this.onLeftResize = __bind(this.onLeftResize, this);
      this.onMouseHoverOnElement = __bind(this.onMouseHoverOnElement, this);
      this.SetCursorMove = __bind(this.SetCursorMove, this);
      this.MakeBackLight = __bind(this.MakeBackLight, this);
      this.GetOnMouseHoverElement = __bind(this.GetOnMouseHoverElement, this);
      this.onCanResize = __bind(this.onCanResize, this);
      this.CheckResizeEvents = __bind(this.CheckResizeEvents, this);
      this.CheckOnMoveElement = __bind(this.CheckOnMoveElement, this);
      this.CheckOnCanResize = __bind(this.CheckOnCanResize, this);
      this.CheckOnResize = __bind(this.CheckOnResize, this);
      this.CheckOnBottomResize = __bind(this.CheckOnBottomResize, this);
      this.CheckOnTopResize = __bind(this.CheckOnTopResize, this);
      this.CheckOnRightResize = __bind(this.CheckOnRightResize, this);
      this.CheckOnLeftResize = __bind(this.CheckOnLeftResize, this);
      this.ExecuteEventHandlers = __bind(this.ExecuteEventHandlers, this);
      this.InitEventHandlers();
      this.areaEvents = {
        onCanRightResize: false,
        onCanLeftResize: false,
        onCanBottomResize: false,
        onCanTopResize: false,
        onLeftResize: false,
        onTopResize: false,
        onRightResize: false,
        onBottomResize: false,
        onResize: false,
        onCanResize: false,
        onMouseHoverOnEmptySpace: false,
        onMouseDown: false,
        onMouseUp: false,
        onMouseHoverOnElement: false,
        onMoveElement: false
      };
    }

    EventsHandlerInitializer.prototype.ExecuteEventHandlers = function(e, ui) {
      var event, _ref, _results;
      _ref = this.areaEvents;
      _results = [];
      for (event in _ref) {
        if (!__hasProp.call(_ref, event)) continue;
        if (this.areaEvents[event]) {
          _results.push(this[event](e, ui));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    EventsHandlerInitializer.prototype.CheckOnLeftResize = function(x) {
      this.areaEvents.onCanLeftResize = this.elem.obj.IsLeftResize(x);
      return this.areaEvents.onLeftResize = this.areaEvents.onLeftResize || (this.areaEvents.onCanLeftResize && this.areaEvents.onMouseDown);
    };

    EventsHandlerInitializer.prototype.CheckOnRightResize = function(x) {
      this.areaEvents.onCanRightResize = this.elem.obj.IsRightResize(x);
      return this.areaEvents.onRightResize = this.areaEvents.onRightResize || (this.areaEvents.onCanRightResize && this.areaEvents.onMouseDown);
    };

    EventsHandlerInitializer.prototype.CheckOnTopResize = function(y) {
      this.areaEvents.onCanTopResize = this.elem.obj.IsTopResize(y);
      return this.areaEvents.onTopResize = this.areaEvents.onTopResize || (this.areaEvents.onCanTopResize && this.areaEvents.onMouseDown);
    };

    EventsHandlerInitializer.prototype.CheckOnBottomResize = function(y) {
      this.areaEvents.onCanBottomResize = this.elem.obj.IsBottomResize(y);
      return this.areaEvents.onBottomResize = this.areaEvents.onBottomResize || (this.areaEvents.onCanBottomResize && this.areaEvents.onMouseDown);
    };

    EventsHandlerInitializer.prototype.CheckOnResize = function() {
      if (this.areaEvents.onLeftResize || this.areaEvents.onTopResize || this.areaEvents.onBottomResize || this.areaEvents.onRightResize) {
        this.areaEvents.onResize = true;
      } else {
        this.areaEvents.onResize = false;
      }
      return this.areaEvents.onResize;
    };

    EventsHandlerInitializer.prototype.CheckOnCanResize = function() {
      if (this.areaEvents.onCanRightResize || this.areaEvents.onCanBottomResize || this.areaEvents.onCanTopResize || this.areaEvents.onCanLeftResize) {
        this.areaEvents.onCanResize = true;
      } else {
        this.areaEvents.onCanResize = false;
      }
      return this.areaEvents.onCanResize;
    };

    EventsHandlerInitializer.prototype.CheckOnMoveElement = function() {
      if (this.areaEvents.onMouseDown && !this.areaEvents.onResize) {
        return this.areaEvents.onMoveElement = true;
      } else {
        return this.areaEvents.onMoveElement = false;
      }
    };

    EventsHandlerInitializer.prototype.CheckResizeEvents = function(e) {
      var c;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
      if (this.areaEvents.onMoveElement) {
        return;
      }
      this.CheckOnLeftResize(c.canvasX);
      this.CheckOnTopResize(c.canvasY);
      this.CheckOnBottomResize(c.canvasY);
      this.CheckOnRightResize(c.canvasX);
      return this.CheckOnResize();
    };

    EventsHandlerInitializer.prototype.onCanResize = function() {};

    EventsHandlerInitializer.prototype.GetOnMouseHoverElement = function(e) {
      var c, idHover;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
      idHover = this.app.areaMap.GetCell(c.mapCellX, c.mapCellY);
      return this.app.schemeData.GetById(idHover);
    };

    EventsHandlerInitializer.prototype.MakeBackLight = function(element) {
      element.obj.isMouseHover = true;
      this.app.UpdateArea();
      return element.obj.isMouseHover = false;
    };

    EventsHandlerInitializer.prototype.SetCursorMove = function() {
      return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'move';
    };

    EventsHandlerInitializer.prototype.onMouseHoverOnElement = function(e) {
      if (!this.areaEvents.onResize) {
        this.elem = this.GetOnMouseHoverElement(e);
        this.MakeBackLight(this.elem);
      }
      this.CheckResizeEvents(e);
      if (!this.CheckOnCanResize()) {
        this.SetCursorMove();
      }
      this.CheckOnMoveElement(e);
      this.elementHasBeenSelected = true;
      return this.areaEvents.onMouseHoverOnEmptySpace = false;
    };

    EventsHandlerInitializer.prototype.onLeftResize = function(e) {
      var c;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
      return this.elem.obj.ResizeLeft(c.canvasX);
    };

    EventsHandlerInitializer.prototype.onRightResize = function(e) {
      var c;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
      return this.elem.obj.ResizeRight(c.canvasX);
    };

    EventsHandlerInitializer.prototype.onTopResize = function(e) {
      var c;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
      return this.elem.obj.ResizeTop(c.canvasY);
    };

    EventsHandlerInitializer.prototype.onBottomResize = function(e) {
      var c;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
      return this.elem.obj.ResizeBottom(c.canvasY);
    };

    EventsHandlerInitializer.prototype.onResize = function() {};

    EventsHandlerInitializer.prototype.onMoveElement = function(e) {
      var c;
      c = this.app.drawingArea.GetCanvasCoords(e.pageX - this.elem.obj.width / 2, e.pageY - this.elem.obj.height / 2);
      this.elem.obj.Move(c.canvasX, c.canvasY);
      return this.app.UpdateArea();
    };

    EventsHandlerInitializer.prototype.onMouseUp = function() {};

    EventsHandlerInitializer.prototype.onCanRightResize = function(e) {
      return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'col-resize';
    };

    EventsHandlerInitializer.prototype.onCanBottomResize = function(e) {
      return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'row-resize';
    };

    EventsHandlerInitializer.prototype.onCanLeftResize = function(e) {
      return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'col-resize';
    };

    EventsHandlerInitializer.prototype.onCanTopResize = function(e) {
      return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'row-resize';
    };

    EventsHandlerInitializer.prototype.onMouseHoverOnEmptySpace = function(e) {
      $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'default';
      this.areaEvents.onMouseHoverOnEmptySpace = true;
      if (this.elementHasBeenSelected) {
        this.app.UpdateArea();
        return this.elementHasBeenSelected = false;
      }
    };

    EventsHandlerInitializer.prototype.onMouseDown = function(e) {
      return this.app.UpdateArea();
    };

    EventsHandlerInitializer.prototype.InitEventHandlers = function() {
      $('#' + this.app.appConfig.canvasId).on('mousemove', (function(_this) {
        return function(e) {
          var c;
          c = _this.app.drawingArea.GetCanvasCoords(e.pageX, e.pageY);
          _this.areaEvents.onMouseHoverOnEmptySpace = _this.app.areaMap.IsEmptyMapCell(c.mapCellX, c.mapCellY);
          _this.areaEvents.onMouseHoverOnElement = !_this.areaEvents.onMouseHoverOnEmptySpace;
          return _this.ExecuteEventHandlers(e);
        };
      })(this));
      $('#canvas').on('mousedown', (function(_this) {
        return function(e) {
          return _this.areaEvents.onMouseDown = true;
        };
      })(this));
      $('#canvas').on('mouseup', (function(_this) {
        return function(e) {
          _this.areaEvents.onMouseUp = false;
          _this.areaEvents.onMoveElement = false;
          _this.areaEvents.onMouseDown = false;
          _this.areaEvents.onTopResize = false;
          _this.areaEvents.onRightResize = false;
          _this.areaEvents.onBottomResize = false;
          _this.areaEvents.onLeftResize = false;
          return _this.areaEvents.onResize = false;
        };
      })(this));
      return $((function(_this) {
        return function() {
          return $(_this.app.appConfig.schemeElementImage).draggable({
            helper: "clone",
            start: function(e, ui) {
              _this.app.drawingArea.dragingToSchemeElement = e.srcElement;
              _this.startDx = e.pageX - ui.position.left;
              return _this.startDy = e.pageY - ui.position.top;
            },
            drag: function(e, ui) {
              var imgCoords, snappedCoords;
              snappedCoords = _this.app.drawingArea.SnapToGrid(e.pageX, e.pageY, _this.startDx, _this.startDy);
              imgCoords = _this.app.drawingArea.EnterImageInCanvas(snappedCoords.newClientX, snappedCoords.newClientY, ui.helper[0].width, ui.helper[0].height);
              ui.position.left = imgCoords.x;
              return ui.position.top = imgCoords.y;
            },
            stop: function(e, ui) {
              var c, color, countConn, img, newId, r;
              img = ui.helper[0];
              countConn = 2;
              color = _this.app.drawingArea.GetSelectedColor();
              c = _this.app.drawingArea.GetCanvasCoords(ui.position.left, ui.position.top);
              newId = _this.app.schemeData.GetNewID();
              r = _this.app.areaMap.GetRectMapRange(c.canvasX, c.canvasY, img.width, img.height);
              if (_this.app.areaMap.IsEmptyOrKeyMapRange(r.fromI, r.toI, r.fromJ, r.toJ, 'newElement')) {
                _this.app.schemeData.Add(newId, SchemeElement, new SchemeElement(newId, c.canvasX, c.canvasY, img.width, img.height, countConn, img, color, _this.app.areaMap));
                return _this.app.UpdateArea();
              }
            }
          });
        };
      })(this));
    };

    return EventsHandlerInitializer;

  })();

  this.appConfig = {
    classSchemeElementImage: '.scheme-element-image',
    classPaintSchemeForm: '.paint-scheme-form',
    schemeElementImage: '.scheme-element-image',
    classColorSelector: '.color-selector',
    gridStep: '10',
    canvasId: 'canvas',
    canvasWidth: '600',
    canvasHeight: '400',
    idPaintForm: '1',
    colorOnHover: 'blue'
  };

  $(document).ready((function(_this) {
    return function() {
      var appControl;
      appControl = new AppControl(_this.appConfig);
      return appControl.Run();
    };
  })(this));

  SchemeData = (function() {
    function SchemeData() {
      this.Remove = __bind(this.Remove, this);
      this.GetNewID = __bind(this.GetNewID, this);
      this.GetPositionInArr = __bind(this.GetPositionInArr, this);
      this.GetById = __bind(this.GetById, this);
      this.LastComponent = __bind(this.LastComponent, this);
      this.CountComponent = __bind(this.CountComponent, this);
      this.listComponents = new Array();
    }

    SchemeData.prototype.Add = function(id, type, obj) {
      return this.listComponents.push({
        id: id,
        type: type,
        obj: obj
      });
    };

    SchemeData.prototype.CountComponent = function() {
      return this.listComponents.length;
    };

    SchemeData.prototype.LastComponent = function() {
      return this.listComponents[this.listComponents.length - 1];
    };

    SchemeData.prototype.GetById = function(id) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.listComponents[i].id === id) {
          return this.listComponents[i];
        }
      }
      return void 0;
    };

    SchemeData.prototype.GetPositionInArr = function(id) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.listComponents[i].id === id) {
          return i;
        }
      }
      return void 0;
    };

    SchemeData.prototype.GetNewID = function() {
      return this.listComponents.length + 1;
    };

    SchemeData.prototype.Remove = function(id) {
      var pos;
      pos = this.GetPositionInArr(id);
      if (pos !== void 0) {
        return this.listComponents.splice(pos, 1);
      }
    };

    return SchemeData;

  })();

  SchemeElement = (function() {
    SchemeElement.isMouseHover = false;

    function SchemeElement(id, x, y, width, height, CountOfConnections, image, borderColor, areaMap) {
      this.id = id;
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.CountOfConnections = CountOfConnections;
      this.image = image;
      this.borderColor = borderColor;
      this.areaMap = areaMap;
      this.Move = __bind(this.Move, this);
      this.ResizeRight = __bind(this.ResizeRight, this);
      this.ResizeLeft = __bind(this.ResizeLeft, this);
      this.ResizeTop = __bind(this.ResizeTop, this);
      this.ResizeBottom = __bind(this.ResizeBottom, this);
      this.ValidateRange = __bind(this.ValidateRange, this);
      this.ValidateNewSize = __bind(this.ValidateNewSize, this);
      this.ValidateCoords = __bind(this.ValidateCoords, this);
      this.IsRightResize = __bind(this.IsRightResize, this);
      this.IsLeftResize = __bind(this.IsLeftResize, this);
      this.IsBottomResize = __bind(this.IsBottomResize, this);
      this.IsTopResize = __bind(this.IsTopResize, this);
      this.RemoveFromMap = __bind(this.RemoveFromMap, this);
      this.PlaceToMap = __bind(this.PlaceToMap, this);
      this.GetColorByMouseHover = __bind(this.GetColorByMouseHover, this);
      this.DrawShadowRect = __bind(this.DrawShadowRect, this);
      this.GetImgHeight = __bind(this.GetImgHeight, this);
      this.GetImgWidth = __bind(this.GetImgWidth, this);
      this.Draw = __bind(this.Draw, this);
      this.offsetBorderResizeble = 3;
      this.width = Math.round(this.width / this.areaMap.step) * this.areaMap.step;
      this.height = Math.round(this.height / this.areaMap.step) * this.areaMap.step;
      this.PlaceToMap();
    }

    SchemeElement.prototype.Draw = function(ctx, colorOnHover) {
      var avgX, avgY, color, h, w;
      color = this.GetColorByMouseHover(this.borderColor, colorOnHover);
      this.DrawShadowRect(this.x, this.y, this.width, this.height, color, ctx);
      w = this.GetImgWidth(this.image.width, this.width);
      h = this.GetImgHeight(this.image.height, this.height);
      avgX = this.x + Math.round((this.width - w) / 2);
      avgY = this.y + Math.round((this.height - h) / 2);
      return ctx.drawImage(this.image, avgX, avgY, w, h);
    };

    SchemeElement.prototype.GetImgWidth = function(imgW, w) {
      if (imgW < w) {
        return imgW;
      } else {
        return w;
      }
    };

    SchemeElement.prototype.GetImgHeight = function(imgH, h) {
      if (imgH < h) {
        return imgH;
      } else {
        return h;
      }
    };

    SchemeElement.prototype.DrawShadowRect = function(x, y, w, h, color, ctx) {
      ctx.beginPath();
      ctx.shadowColor = color;
      ctx.shadowBlur = 3;
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
      ctx.fillStyle = color;
      ctx.fillRect(x, y, w, h);
      ctx.closePath();
      return ctx.fill();
    };

    SchemeElement.prototype.GetColorByMouseHover = function(color, hoverColor) {
      if (this.isMouseHover) {
        return hoverColor;
      } else {
        return color;
      }
    };

    SchemeElement.prototype.PlaceToMap = function() {
      var i, j, startI, startJ, toI, toJ, _i, _results;
      startJ = Math.round(this.x / this.areaMap.step);
      startI = Math.round(this.y / this.areaMap.step);
      toJ = Math.round(this.width / this.areaMap.step) + startJ;
      toI = Math.round(this.height / this.areaMap.step) + startI;
      _results = [];
      for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
            _results1.push(this.areaMap.SetCell(i, j, this.id));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    SchemeElement.prototype.RemoveFromMap = function() {
      var startI, startJ, toI, toJ;
      startJ = Math.round(this.x / this.areaMap.step);
      startI = Math.round(this.y / this.areaMap.step);
      toJ = Math.round(this.width / this.areaMap.step) + startJ;
      toI = Math.round(this.height / this.areaMap.step) + startI;
      return this.areaMap.ClearRange(startI, toI, startJ, toJ);
    };

    SchemeElement.prototype.IsTopResize = function(y) {
      if (this.y < y + this.offsetBorderResizeble && this.y > y - this.offsetBorderResizeble) {
        return true;
      } else {
        return false;
      }
    };

    SchemeElement.prototype.IsBottomResize = function(y) {
      if (this.y + this.height < y + this.offsetBorderResizeble && this.y + this.height > y - this.offsetBorderResizeble) {
        return true;
      } else {
        return false;
      }
    };

    SchemeElement.prototype.IsLeftResize = function(x) {
      if (this.x < x + this.offsetBorderResizeble && this.x > x - this.offsetBorderResizeble) {
        return true;
      } else {
        return false;
      }
    };

    SchemeElement.prototype.IsRightResize = function(x) {
      if (this.x + this.width < x + this.offsetBorderResizeble && this.x + this.width > x - this.offsetBorderResizeble) {
        return true;
      } else {
        return false;
      }
    };

    SchemeElement.prototype.ValidateCoords = function(x, y) {
      if (this.areaMap.ValidateMapIndexes(y / this.areaMap.step, x / this.areaMap.step) && x + this.width <= this.areaMap.width && y + this.height <= this.areaMap.height) {
        return true;
      } else {
        return false;
      }
    };

    SchemeElement.prototype.ValidateNewSize = function(newSize) {
      if (newSize < this.areaMap.step) {
        return false;
      } else {
        return true;
      }
    };

    SchemeElement.prototype.ValidateRange = function(r) {
      if (this.areaMap.IsEmptyOrKeyMapRange(r.fromI, r.toI, r.fromJ, r.toJ, this.id)) {
        return true;
      } else {
        return false;
      }
    };

    SchemeElement.prototype.ResizeBottom = function(newY) {
      var newH, r;
      newY = Math.round(newY / this.areaMap.step) * this.areaMap.step;
      newH = newY - this.y;
      r = this.areaMap.GetRectMapRange(this.x, this.y, this.width, newH);
      if (!(this.ValidateNewSize(newH) && this.ValidateRange(r))) {
        return false;
      }
      this.RemoveFromMap();
      this.height = newH;
      return this.PlaceToMap();
    };

    SchemeElement.prototype.ResizeTop = function(newY) {
      var newH, r;
      newY = Math.round(newY / this.areaMap.step) * this.areaMap.step;
      newH = this.y + this.height - newY;
      r = this.areaMap.GetRectMapRange(this.x, newY, this.width, newH);
      if (!(this.ValidateNewSize(newH) && this.ValidateRange(r))) {
        return false;
      }
      this.RemoveFromMap();
      this.height = newH;
      this.y = newY;
      return this.PlaceToMap();
    };

    SchemeElement.prototype.ResizeLeft = function(newX) {
      var newW, r;
      newX = Math.round(newX / this.areaMap.step) * this.areaMap.step;
      newW = this.x + this.width - newX;
      r = this.areaMap.GetRectMapRange(newX, this.y, newW, this.height);
      if (!(this.ValidateNewSize(newW) && this.ValidateRange(r))) {
        return false;
      }
      this.RemoveFromMap();
      this.width = newW;
      this.x = newX;
      return this.PlaceToMap();
    };

    SchemeElement.prototype.ResizeRight = function(newX) {
      var newW, r;
      newX = Math.round(newX / this.areaMap.step) * this.areaMap.step;
      newW = newX - this.x;
      r = this.areaMap.GetRectMapRange(this.x, this.y, newW, this.height);
      if (!(this.ValidateNewSize(newW) && this.ValidateRange(r))) {
        return false;
      }
      this.RemoveFromMap();
      this.width = newW;
      return this.PlaceToMap();
    };

    SchemeElement.prototype.Move = function(newX, newY) {
      var r;
      newX = Math.round(newX / this.areaMap.step) * this.areaMap.step;
      newY = Math.round(newY / this.areaMap.step) * this.areaMap.step;
      r = this.areaMap.GetRectMapRange(newX, newY, this.width, this.height);
      if (!(this.ValidateCoords(newX, newY) && this.ValidateRange(r))) {
        return false;
      }
      this.RemoveFromMap();
      this.x = newX;
      this.y = newY;
      return this.PlaceToMap();
    };

    return SchemeElement;

  })();

  SchemeLine = (function() {
    function SchemeLine(coords, borderColor) {
      this.coords = coords;
      this.borderColor = borderColor;
      this.DrawLine = __bind(this.DrawLine, this);
      this.Draw = __bind(this.Draw, this);
    }

    SchemeLine.prototype.Draw = function() {};

    SchemeLine.prototype.DrawLine = function(coords, color) {
      var i, _i, _ref;
      this.context.beginPath();
      for (i = _i = 0, _ref = coords.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.context.moveTo(coords[i][0], coords[i][1]);
        this.context.lineTo(coords[i + 1][0], coords[i + 1][1]);
      }
      this.context.lineWidth = 2;
      this.context.strokeStyle = color;
      this.context.lineCap = "butt";
      return this.context.stroke();
    };

    return SchemeLine;

  })();

}).call(this);
