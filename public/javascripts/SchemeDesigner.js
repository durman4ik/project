// Generated by CoffeeScript 1.8.0
var AppControl, AreaBuffer, AreaMap, DrawArea, EventsHandlerInitializer, SchemeData, SchemeElement, SchemeLine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty;

AppControl = (function() {
  function AppControl(appConfig) {
    this.appConfig = appConfig;
    this.run = __bind(this.run, this);
    this.draw_image_data = __bind(this.draw_image_data, this);
    this.buffered_draw = __bind(this.buffered_draw, this);
    this.clear_buffer = __bind(this.clear_buffer, this);
    this.init_buffer = __bind(this.init_buffer, this);
    this.init_scheme_data = __bind(this.init_scheme_data, this);
    this.init_event_handlers = __bind(this.init_event_handlers, this);
    this.update_area = __bind(this.update_area, this);
    this.drawing_buffered_grid = __bind(this.drawing_buffered_grid, this);
    this.init_draw_area = __bind(this.init_draw_area, this);
  }

  AppControl.prototype.init_draw_area = function() {
    this.drawingArea = new DrawArea(this.appConfig);
    this.areaMap = new AreaMap(this.appConfig.canvasWidth, this.appConfig.canvasHeight, this.appConfig.gridStep);
    return $(this.appConfig.classPaintSchemeForm).addClass('noselect');
  };

  AppControl.prototype.drawing_buffered_grid = function() {
    return this.drawingArea.draw_snap_grid(this.appConfig.gridStep);
  };

  AppControl.prototype.update_area = function() {
    this.buffered_draw('grid', this.drawing_buffered_grid, 0, 0, this.appConfig.canvasWidth, this.appConfig.canvasHeight, this.drawingArea.context);
    return this.drawingArea.draw_scheme_data(this.schemeData.listComponents);
  };

  AppControl.prototype.init_event_handlers = function() {
    return this.EventsHanlerInitializer = new EventsHandlerInitializer(this);
  };

  AppControl.prototype.init_scheme_data = function() {
    return this.schemeData = new SchemeData();
  };

  AppControl.prototype.init_buffer = function() {
    return this.bufferArea = new AreaBuffer();
  };

  AppControl.prototype.clear_buffer = function(key) {
    return this.bufferArea.remove(key);
  };

  AppControl.prototype.buffered_draw = function(key, drawFunct, x, y, w, h, ctx) {
    var b, img;
    b = this.bufferArea.get_by_key(key);
    if (b !== void 0) {
      return this.draw_image_data(b.image, b.x, b.y, ctx);
    } else {
      drawFunct();
      img = ctx.getImageData(x, y, w, h);
      return this.bufferArea.add(key, img, x, y);
    }
  };

  AppControl.prototype.draw_image_data = function(image, dx, dy, ctx) {
    return ctx.putImageData(image, dx, dy);
  };

  AppControl.prototype.run = function() {
    this.init_buffer();
    this.init_scheme_data();
    this.init_draw_area();
    this.init_event_handlers();
    return this.update_area();
  };

  return AppControl;

})();

AreaBuffer = (function() {
  function AreaBuffer() {
    this.remove = __bind(this.remove, this);
    this.update = __bind(this.update, this);
    this.add = __bind(this.add, this);
    this.get_position_in_arr = __bind(this.get_position_in_arr, this);
    this.get_by_key = __bind(this.get_by_key, this);
    this.buffer_array = __bind(this.buffer_array, this);
    this.buffer_array = new Array();
  }

  AreaBuffer.prototype.buffer_array = function() {
    return this.buffer_array;
  };

  AreaBuffer.prototype.get_by_key = function(key) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.buffer_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.buffer_array[i].key === key) {
        return this.buffer_array[i];
      }
    }
    return void 0;
  };

  AreaBuffer.prototype.get_position_in_arr = function(key) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.buffer_array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.buffer_array[i].key === key) {
        return i;
      }
    }
    return void 0;
  };

  AreaBuffer.prototype.add = function(key, image, x, y) {
    this.buffer_array.push({
      key: key,
      image: image,
      x: x,
      y: y
    });
    return this.buffer_array.length;
  };

  AreaBuffer.prototype.update = function(key, image) {
    return this.get_by_key(key).image = image;
  };

  AreaBuffer.prototype.remove = function(key) {
    var pos;
    pos = this.get_position_in_array(key);
    if (pos !== void 0) {
      return this.buffer_array.splice(pos, 1);
    }
  };

  return AreaBuffer;

})();

AreaMap = (function() {
  function AreaMap(width, height, step) {
    var i, _i, _ref;
    this.width = width;
    this.height = height;
    this.step = step;
    this.get_rect_map_range = __bind(this.get_rect_map_range, this);
    this.clear_range = __bind(this.clear_range, this);
    this.is_empty_map_cell = __bind(this.is_empty_map_cell, this);
    this.is_empty_or_key_map_range = __bind(this.is_empty_or_key_map_range, this);
    this.validate_map_indexes = __bind(this.validate_map_indexes, this);
    this.set_cell = __bind(this.set_cell, this);
    this.get_cell_by_coords = __bind(this.get_cell_by_coords, this);
    this.get_cell = __bind(this.get_cell, this);
    this.map = new Array(Math.round(this.height / this.step) + 1);
    for (i = _i = 0, _ref = this.map.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.map[i] = new Array(this.width / this.step + 1);
    }
  }

  AreaMap.prototype.get_cell = function(i, j) {
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j];
    }
  };

  AreaMap.prototype.get_cell_by_coords = function(x, y) {
    var i, j;
    j = Math.round(x / this.step);
    i = Math.round(y / this.step);
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j];
    } else {
      return void 0;
    }
  };

  AreaMap.prototype.set_cell = function(i, j, value) {
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j] = value;
    }
  };

  AreaMap.prototype.validate_map_indexes = function(i, j) {
    if (i <= this.map.length && i >= 0) {
      if (j <= this.map[0].length && j >= 0) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  AreaMap.prototype.is_empty_or_key_map_range = function(startI, toI, startJ, toJ, key) {
    var i, j, _i, _j;
    for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
      for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
        if (this.map[i][j] !== void 0 && this.map[i][j] !== key) {
          return false;
        }
      }
    }
    return true;
  };

  AreaMap.prototype.is_empty_map_cell = function(i, j) {
    if (this.validate_map_indexes(i, j)) {
      return this.map[i][j] === void 0;
    }
  };

  AreaMap.prototype.clear_range = function(startI, toI, startJ, toJ) {
    var i, j, _i, _j;
    if (this.validate_map_indexes(startI, startJ) && this.validate_map_indexes(toI, toJ)) {
      for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
        for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
          this.map[i][j] = void 0;
        }
      }
      return true;
    } else {
      throw "lol";
      return false;
    }
  };

  AreaMap.prototype.get_rect_map_range = function(x, y, w, h) {
    return {
      fromI: Math.round(y / this.step),
      toI: Math.round((y + h) / this.step),
      fromJ: Math.round(x / this.step),
      toJ: Math.round((x + w) / this.step)
    };
  };

  return AreaMap;

})();

DrawArea = (function() {
  function DrawArea(appConfig) {
    this.appConfig = appConfig;
    this.snap_to_grid = __bind(this.snap_to_grid, this);
    this.enter_image_in_canvas = __bind(this.enter_image_in_canvas, this);
    this.get_canvas_coords = __bind(this.get_canvas_coords, this);
    this.draw_scheme_data = __bind(this.draw_scheme_data, this);
    this.get_selected_color = __bind(this.get_selected_color, this);
    this.draw_snap_grid = __bind(this.draw_snap_grid, this);
    this.draw_background = __bind(this.draw_background, this);
    this.canvas = document.getElementById(this.appConfig.canvasId);
    this.canvas.height = this.appConfig.canvasHeight;
    this.canvas.width = this.appConfig.canvasWidth;
    this.context = this.canvas.getContext("2d");
  }

  DrawArea.prototype.draw_background = function() {
    this.context.beginPath();
    this.context.fillStyle = 'rgba( 200, 255, 255, 1 )';
    this.context.rect(0, 0, this.canvas.width, this.canvas.height);
    this.context.closePath();
    return this.context.fill();
  };

  DrawArea.prototype.draw_snap_grid = function(step) {
    var i, j, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.canvas.width / step; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (j = _j = 0, _ref1 = this.canvas.height / step; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          this.context.beginPath();
          this.context.arc(i * step, j * step, 1, 0, 2 * Math.PI);
          this.context.fillStyle = 'blue';
          this.context.closePath();
          _results1.push(this.context.fill());
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DrawArea.prototype.get_selected_color = function() {
    return $('#' + this.appConfig.idPaintForm + ' ' + this.appConfig.classColorSelector)[0].value;
  };

  DrawArea.prototype.draw_scheme_data = function(scheme_data) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = scheme_data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(scheme_data[i].obj.Draw(this.context, this.appConfig.colorOnHover));
    }
    return _results;
  };

  DrawArea.prototype.get_canvas_coords = function(mouse_x, mouse_y) {
    var c;
    c = this.snap_to_grid(mouse_x - this.canvas.offsetLeft, mouse_y - this.canvas.offsetTop);
    return {
      canvasX: c.canvasX,
      canvasY: c.canvasY,
      mapCellX: Math.round(c.canvasY / this.appConfig.gridStep),
      mapCellY: Math.round(c.canvasX / this.appConfig.gridStep)
    };
  };

  DrawArea.prototype.enter_image_in_canvas = function(x, y, w, h) {
    if (x < this.canvas.offsetLeft) {
      x = this.canvas.offsetLeft;
    }
    if (x + w > this.canvas.offsetLeft + this.canvas.offsetWidth) {
      x = this.canvas.offsetLeft + this.canvas.offsetWidth - w;
    }
    if (y < this.canvas.offsetTop) {
      y = this.canvas.offsetTop;
    }
    if (y + h > this.canvas.offsetTop + this.canvas.offsetHeight) {
      y = this.canvas.offsetTop + this.canvas.offsetHeight - h;
    }
    return {
      x: x,
      y: y
    };
  };

  DrawArea.prototype.snap_to_grid = function(x, y, dx, dy) {
    var canvasOffsetX, canvasOffsetY, snapX, snapY;
    if (dx === void 0) {
      dx = 0;
    }
    if (dy === void 0) {
      dy = 0;
    }
    snapX = Math.round((x - dx) / this.appConfig.gridStep);
    snapY = Math.round((y - dy) / this.appConfig.gridStep);
    canvasOffsetY = this.canvas.offsetTop % this.appConfig.gridStep;
    canvasOffsetX = this.canvas.offsetLeft % this.appConfig.gridStep;
    return {
      canvasX: snapX * this.appConfig.gridStep,
      canvasY: snapY * this.appConfig.gridStep,
      newClientX: (snapX * this.appConfig.gridStep) + canvasOffsetX,
      newClientY: (snapY * this.appConfig.gridStep) + canvasOffsetY
    };
  };

  return DrawArea;

})();

EventsHandlerInitializer = (function() {
  function EventsHandlerInitializer(app) {
    this.app = app;
    this.init_event_handlers = __bind(this.init_event_handlers, this);
    this.on_mouse_down = __bind(this.on_mouse_down, this);
    this.on_mouse_hover_on_empty_space = __bind(this.on_mouse_hover_on_empty_space, this);
    this.on_can_top_resize = __bind(this.on_can_top_resize, this);
    this.on_can_left_resize = __bind(this.on_can_left_resize, this);
    this.on_can_bottom_resize = __bind(this.on_can_bottom_resize, this);
    this.on_can_right_resize = __bind(this.on_can_right_resize, this);
    this.on_mouse_up = __bind(this.on_mouse_up, this);
    this.on_move_element = __bind(this.on_move_element, this);
    this.on_resize = __bind(this.on_resize, this);
    this.on_bottom_resize = __bind(this.on_bottom_resize, this);
    this.on_top_resize = __bind(this.on_top_resize, this);
    this.on_right_resize = __bind(this.on_right_resize, this);
    this.on_left_resize = __bind(this.on_left_resize, this);
    this.on_mouse_hover_on_element = __bind(this.on_mouse_hover_on_element, this);
    this.set_cursor_move = __bind(this.set_cursor_move, this);
    this.make_backLight = __bind(this.make_backLight, this);
    this.get_on_mouse_hover_element = __bind(this.get_on_mouse_hover_element, this);
    this.on_can_resize = __bind(this.on_can_resize, this);
    this.check_resize_events = __bind(this.check_resize_events, this);
    this.check_on_move_element = __bind(this.check_on_move_element, this);
    this.check_on_can_resize = __bind(this.check_on_can_resize, this);
    this.check_on_resize = __bind(this.check_on_resize, this);
    this.check_on_bottom_resize = __bind(this.check_on_bottom_resize, this);
    this.check_on_top_resize = __bind(this.check_on_top_resize, this);
    this.check_on_right_resize = __bind(this.check_on_right_resize, this);
    this.check_on_left_resize = __bind(this.check_on_left_resize, this);
    this.execute_event_handlers = __bind(this.execute_event_handlers, this);
    this.unselect_tool_buttons = __bind(this.unselect_tool_buttons, this);
    this.on_tool_move = __bind(this.on_tool_move, this);
    this.on_tool_draw_line = __bind(this.on_tool_draw_line, this);
    this.on_tool_delete = __bind(this.on_tool_delete, this);
    this.on_tool_change_color = __bind(this.on_tool_change_color, this);
    this.init_event_handlers();
    this.areaEvents = {
      on_can_right_resize: false,
      on_can_left_resize: false,
      on_can_bottom_resize: false,
      on_can_top_resize: false,
      on_left_resize: false,
      on_top_resize: false,
      on_right_resize: false,
      on_bottom_resize: false,
      on_resize: false,
      on_can_resize: false,
      on_mouse_hover_on_empty_space: false,
      on_mouse_down: false,
      on_mouse_up: false,
      on_mouse_hover_on_element: false,
      on_move_element: false,
      on_tool_delete: false,
      on_tool_move: false,
      on_tool_change_color: false,
      on_tool_draw_line: false
    };
  }

  EventsHandlerInitializer.prototype.on_tool_change_color = function() {
    if (this.areaEvents.on_mouse_down && this.elem !== void 0) {
      return this.elem.obj.borderColor = this.app.drawingArea.get_selected_color();
    }
  };

  EventsHandlerInitializer.prototype.on_tool_delete = function() {
    if (this.areaEvents.on_mouse_down && this.elem !== void 0) {
      this.app.schemeData.remove(this.elem.id);
      this.elem = void 0;
      this.areaEvents.on_mouse_hover_on_element = false;
      this.areaEvents.on_mouse_hover_on_empty_space = true;
      this.areaEvents.on_resize = false;
      return this.areaEvents.on_can_resize = false;
    }
  };

  EventsHandlerInitializer.prototype.on_tool_draw_line = function() {};

  EventsHandlerInitializer.prototype.on_tool_move = function() {};

  EventsHandlerInitializer.prototype.unselect_tool_buttons = function() {
    this.areaEvents.on_tool_delete = false;
    this.areaEvents.on_tool_move = false;
    return this.areaEvents.on_tool_change_color = false;
  };

  EventsHandlerInitializer.prototype.execute_event_handlers = function(e, ui) {
    var event, _ref, _results;
    _ref = this.areaEvents;
    _results = [];
    for (event in _ref) {
      if (!__hasProp.call(_ref, event)) continue;
      if (this.areaEvents[event]) {
        _results.push(this[event](e, ui));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  EventsHandlerInitializer.prototype.check_on_left_resize = function(x) {
    this.areaEvents.on_can_left_resize = this.elem.obj.IsLeftResize(x);
    return this.areaEvents.on_left_resize = this.areaEvents.on_left_resize || (this.areaEvents.on_can_left_resize && this.areaEvents.on_mouse_down);
  };

  EventsHandlerInitializer.prototype.check_on_right_resize = function(x) {
    this.areaEvents.on_can_right_resize = this.elem.obj.IsRightResize(x);
    return this.areaEvents.on_right_resize = this.areaEvents.on_right_resize || (this.areaEvents.on_can_right_resize && this.areaEvents.on_mouse_down);
  };

  EventsHandlerInitializer.prototype.check_on_top_resize = function(y) {
    this.areaEvents.on_can_top_resize = this.elem.obj.IsTopResize(y);
    return this.areaEvents.on_top_resize = this.areaEvents.on_top_resize || (this.areaEvents.on_can_top_resize && this.areaEvents.on_mouse_down);
  };

  EventsHandlerInitializer.prototype.check_on_bottom_resize = function(y) {
    this.areaEvents.on_can_bottom_resize = this.elem.obj.IsBottomResize(y);
    return this.areaEvents.on_bottom_resize = this.areaEvents.on_bottom_resize || (this.areaEvents.on_can_bottom_resize && this.areaEvents.on_mouse_down);
  };

  EventsHandlerInitializer.prototype.check_on_resize = function() {
    if (this.areaEvents.on_left_resize || this.areaEvents.on_top_resize || this.areaEvents.on_bottom_resize || this.areaEvents.on_right_resize) {
      this.areaEvents.on_resize = true;
    } else {
      this.areaEvents.on_resize = false;
    }
    return this.areaEvents.on_resize;
  };

  EventsHandlerInitializer.prototype.check_on_can_resize = function() {
    if (this.areaEvents.on_can_right_resize || this.areaEvents.on_can_bottom_resize || this.areaEvents.on_can_top_resize || this.areaEvents.on_can_left_resize) {
      this.areaEvents.on_can_resize = true;
    } else {
      this.areaEvents.on_can_resize = false;
    }
    return this.areaEvents.on_can_resize;
  };

  EventsHandlerInitializer.prototype.check_on_move_element = function() {
    if (this.areaEvents.on_mouse_down && !this.areaEvents.on_resize && this.areaEvents.on_tool_move) {
      return this.areaEvents.on_move_element = true;
    } else {
      return this.areaEvents.on_move_element = false;
    }
  };

  EventsHandlerInitializer.prototype.check_resize_events = function(e) {
    var c;
    c = this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
    if (this.areaEvents.on_move_element) {
      return;
    }
    this.check_on_left_resize(c.canvasX);
    this.check_on_top_resize(c.canvasY);
    this.check_on_bottom_resize(c.canvasY);
    this.check_on_right_resize(c.canvasX);
    return this.check_on_resize();
  };

  EventsHandlerInitializer.prototype.on_can_resize = function() {};

  EventsHandlerInitializer.prototype.get_on_mouse_hover_element = function(e) {
    var c, idHover;
    c = this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
    idHover = this.app.areaMap.get_cell(c.mapCellX, c.mapCellY);
    return this.app.schemeData.get_by_id(idHover);
  };

  EventsHandlerInitializer.prototype.make_backLight = function(element) {
    element.obj.isMouseHover = true;
    this.app.update_area();
    return element.obj.isMouseHover = false;
  };

  EventsHandlerInitializer.prototype.set_cursor_move = function() {
    return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'move';
  };

  EventsHandlerInitializer.prototype.on_mouse_hover_on_element = function(e) {
    if (!this.areaEvents.on_resize) {
      this.elem = this.get_on_mouse_hover_element(e);
      this.make_backLight(this.elem);
    }
    this.check_resize_events(e);
    if (!this.check_on_can_resize()) {
      this.set_cursor_move();
    }
    this.check_on_move_element(e);
    this.elementHasBeenSelected = true;
    return this.areaEvents.on_mouse_hover_on_empty_space = false;
  };

  EventsHandlerInitializer.prototype.on_left_resize = function(e) {
    var c;
    c = this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
    return this.elem.obj.ResizeLeft(c.canvasX);
  };

  EventsHandlerInitializer.prototype.on_right_resize = function(e) {
    var c;
    c = this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
    return this.elem.obj.ResizeRight(c.canvasX);
  };

  EventsHandlerInitializer.prototype.on_top_resize = function(e) {
    var c;
    c = this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
    return this.elem.obj.ResizeTop(c.canvasY);
  };

  EventsHandlerInitializer.prototype.on_bottom_resize = function(e) {
    var c;
    c = this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
    return this.elem.obj.ResizeBottom(c.canvasY);
  };

  EventsHandlerInitializer.prototype.on_resize = function() {};

  EventsHandlerInitializer.prototype.on_move_element = function(e) {
    var c;
    c = this.app.drawingArea.get_canvas_coords(e.pageX - this.elem.obj.width / 2, e.pageY - this.elem.obj.height / 2);
    this.elem.obj.Move(c.canvasX, c.canvasY);
    return this.app.update_area();
  };

  EventsHandlerInitializer.prototype.on_mouse_up = function() {};

  EventsHandlerInitializer.prototype.on_can_right_resize = function(e) {
    return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'col-resize';
  };

  EventsHandlerInitializer.prototype.on_can_bottom_resize = function(e) {
    return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'row-resize';
  };

  EventsHandlerInitializer.prototype.on_can_left_resize = function(e) {
    return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'col-resize';
  };

  EventsHandlerInitializer.prototype.on_can_top_resize = function(e) {
    return $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'row-resize';
  };

  EventsHandlerInitializer.prototype.on_mouse_hover_on_empty_space = function(e) {
    $('#' + this.app.appConfig.canvasId)[0].style.cursor = 'default';
    this.areaEvents.on_mouse_hover_on_empty_space = true;
    if (this.elementHasBeenSelected) {
      this.app.update_area();
      return this.elementHasBeenSelected = false;
    }
  };

  EventsHandlerInitializer.prototype.on_mouse_down = function(e) {
    return this.app.update_area();
  };

  EventsHandlerInitializer.prototype.init_event_handlers = function() {
    $('#' + this.app.appConfig.canvasId).on('mousemove', (function(_this) {
      return function(e) {
        var c;
        c = _this.app.drawingArea.get_canvas_coords(e.pageX, e.pageY);
        _this.areaEvents.on_mouse_hover_on_empty_space = _this.app.areaMap.is_empty_map_cell(c.mapCellX, c.mapCellY);
        _this.areaEvents.on_mouse_hover_on_element = !_this.areaEvents.on_mouse_hover_on_empty_space;
        return _this.execute_event_handlers(e);
      };
    })(this));
    $('#canvas').on('mousedown', (function(_this) {
      return function(e) {
        return _this.areaEvents.on_mouse_down = true;
      };
    })(this));
    $('#canvas').on('mouseup', (function(_this) {
      return function(e) {
        _this.areaEvents.on_mouse_up = false;
        _this.areaEvents.on_move_element = false;
        _this.areaEvents.on_mouse_down = false;
        _this.areaEvents.on_top_resize = false;
        _this.areaEvents.on_right_resize = false;
        _this.areaEvents.on_bottom_resize = false;
        _this.areaEvents.on_left_resize = false;
        return _this.areaEvents.on_resize = false;
      };
    })(this));
    $((function(_this) {
      return function() {
        return $(_this.app.appConfig.classSchemeElementImage).draggable({
          helper: "clone",
          start: function(e, ui) {
            _this.app.drawingArea.dragingToSchemeElement = e.srcElement;
            _this.startDx = e.pageX - ui.position.left;
            return _this.startDy = e.pageY - ui.position.top;
          },
          drag: function(e, ui) {
            var img_coords, snapped_coords;
            snapped_coords = _this.app.drawingArea.snap_to_grid(e.pageX, e.pageY, _this.startDx, _this.startDy);
            img_coords = _this.app.drawingArea.enter_image_in_canvas(snapped_coords.newClientX, snapped_coords.newClientY, ui.helper[0].width, ui.helper[0].height);
            ui.position.left = img_coords.x;
            return ui.position.top = img_coords.y;
          },
          stop: function(e, ui) {
            var c, color, count_conn, elem, id_element, id_scheme, img, newId, r;
            img = ui.helper[0];
            count_conn = 2;
            color = _this.app.drawingArea.get_selected_color();
            c = _this.app.drawingArea.get_canvas_coords(ui.position.left, ui.position.top);
            newId = _this.app.schemeData.get_new_id();
            r = _this.app.areaMap.get_rect_map_range(c.canvasX, c.canvasY, img.width, img.height);
            if (_this.app.areaMap.is_empty_or_key_map_range(r.fromI, r.toI, r.fromJ, r.toJ, 'newElement')) {
              elem = new SchemeElement(newId, c.canvasX, c.canvasY, img.width, img.height, count_conn, img, color, _this.app.areaMap, "");
              id_scheme = $(_this.app.appConfig.classPaintSchemeForm)[0].getAttribute('name').split('_')[1];
              id_element = img.name.split('_')[1];
              _this.app.schemeData.add(newId, SchemeElement, elem);
              _this.app.schemeData.load_element_properties(id_element, id_scheme, _this.app.appConfig, function(res) {
                return elem.DOMPropertiesList = res;
              });
              return _this.app.update_area();
            }
          }
        });
      };
    })(this));
    $(this.app.appConfig.classSaveButton).on('click', (function(_this) {
      return function() {
        return _this.app.schemeData.save_data_to_server(_this.app.appConfig.urlToAJAXsaveScheme);
      };
    })(this));
    $(this.app.appConfig.classLoadButton).on('click', (function(_this) {
      return function() {
        _this.app.schemeData.clear();
        _this.app.schemeData.clear_list_properties();
        return _this.app.schemeData.load_data_from_server(_this.app.appConfig, _this.app.areaMap, function() {
          return _this.app.update_area();
        });
      };
    })(this));
    $('.' + this.app.appConfig.classDeleteButton).on('click', (function(_this) {
      return function() {
        _this.unselect_tool_buttons();
        return _this.areaEvents.on_tool_delete = true;
      };
    })(this));
    $('.' + this.app.appConfig.classMoveButton).on('click', (function(_this) {
      return function() {
        _this.unselect_tool_buttons();
        return _this.areaEvents.on_tool_move = true;
      };
    })(this));
    $('.' + this.app.appConfig.classDrawLineButton).on('click', (function(_this) {
      return function() {
        _this.unselect_tool_buttons();
        return _this.areaEvents.on_tool_draw_line = true;
      };
    })(this));
    return $('.' + this.app.appConfig.classChangeColorButton).on('click', (function(_this) {
      return function() {
        _this.unselect_tool_buttons();
        return _this.areaEvents.on_tool_change_color = true;
      };
    })(this));
  };

  return EventsHandlerInitializer;

})();

this.appConfig = {
  classSchemeElementImage: '.scheme-element-image',
  classSchemeElementProperties: 'scheme-element-properties',
  classSchemeElementPropertiesBlock: 'properties-area',
  classUserElementName: 'user-element-name',
  classElementName: 'element-name',
  classCountElementConnections: 'count-connections',
  classPropertyList: 'properties-list',
  classDeleteButton: 'delete-btn',
  classMoveButton: 'move-btn',
  classDrawLineButton: 'draw-line-bttn',
  classChangeColorButton: 'change-color-bttn',
  classPaintSchemeForm: '.paint-scheme-form',
  classColorSelector: '.color-selector',
  classSaveButton: '.save-button',
  classLoadButton: '.load-button',
  idPaintForm: '1',
  gridStep: '10',
  canvasId: 'canvas',
  canvasWidth: '600',
  canvasHeight: '400',
  colorOnHover: 'blue',
  urlToAJAXsaveScheme: 'http://localhost:3000/ajax',
  urlToAJAXLoadProperties: 'http://localhost:3000/ajax'
};

$(document).ready((function(_this) {
  return function() {
    var appControl;
    appControl = new AppControl(_this.appConfig);
    return appControl.run();
  };
})(this));

SchemeData = (function() {
  function SchemeData() {
    this.is_unique_id = __bind(this.is_unique_id, this);
    this.get_new_id = __bind(this.get_new_id, this);
    this.get_position_in_array = __bind(this.get_position_in_array, this);
    this.get_by_id = __bind(this.get_by_id, this);
    this.last_component = __bind(this.last_component, this);
    this.count_component = __bind(this.count_component, this);
    this.set_RoR_header_for_AJAX = __bind(this.set_RoR_header_for_AJAX, this);
    this.AJAX_query = __bind(this.AJAX_query, this);
    this.save_data_to_server = __bind(this.save_data_to_server, this);
    this.load_data_from_server = __bind(this.load_data_from_server, this);
    this.load_element_properties = __bind(this.load_element_properties, this);
    this.get_properties_from_page = __bind(this.get_properties_from_page, this);
    this.properties_to_list_on_page = __bind(this.properties_to_list_on_page, this);
    this.to_AJAX_data = __bind(this.to_AJAX_data, this);
    this.add_from_AJAX_data = __bind(this.add_from_AJAX_data, this);
    this.clear_list_properties = __bind(this.clear_list_properties, this);
    this.remove_DOM_elem_of_properties = __bind(this.remove_DOM_elem_of_properties, this);
    this.remove = __bind(this.remove, this);
    this.clear = __bind(this.clear, this);
    this.add = __bind(this.add, this);
    this.listComponents = [];
    this.set_RoR_header_for_AJAX();
  }

  SchemeData.prototype.add = function(id, type, obj) {
    return this.listComponents.push({
      id: id,
      type: this.get_function_name(type),
      obj: obj
    });
  };

  SchemeData.prototype.clear = function() {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.listComponents[i].obj.RemoveFromMap();
    }
    return this.listComponents = [];
  };

  SchemeData.prototype.remove = function(id) {
    var pos;
    pos = this.get_position_in_array(id);
    if (pos !== void 0) {
      this.listComponents[pos].obj.RemoveFromMap();
      this.remove_DOM_elem_of_properties(this.listComponents[pos].obj.DOMPropertiesList);
      return this.listComponents.splice(pos, 1);
    }
  };

  SchemeData.prototype.remove_DOM_elem_of_properties = function(elem) {
    return $('.' + appConfig.classSchemeElementPropertiesBlock)[0].removeChild(elem);
  };

  SchemeData.prototype.clear_list_properties = function() {
    return $('.' + appConfig.classSchemeElementPropertiesBlock)[0].innerHTML = '';
  };

  SchemeData.prototype.add_from_AJAX_data = function(responseData, areaMap, appConfig) {
    var i, id, id_scheme, image, o, obj, type, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = responseData.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      id = responseData[i].id;
      o = responseData[i].obj;
      type = window[responseData[i].type];
      image = document.createElement("IMG");
      image.src = o.image;
      id_scheme = $(appConfig.classPaintSchemeForm)[0].getAttribute('name').split('_')[1];
      obj = new type(id, o.x, o.y, o.width, o.height, o.connections, image, o.color, areaMap, "");
      this.load_element_properties(id, id_scheme, appConfig, (function(_this) {
        return function(req) {
          return obj.DOMPropertiesList = req;
        };
      })(this));
      _results.push(this.add(id, type, obj));
    }
    return _results;
  };

  SchemeData.prototype.get_function_name = function(fn) {
    return fn.toString().match(/function ([^(]*)\(/)[1];
  };

  SchemeData.prototype.to_AJAX_data = function() {
    var arr, i, id, objData, type, _i, _ref;
    arr = [];
    for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      id = this.listComponents[i].id;
      type = this.listComponents[i].type;
      objData = this.listComponents[i].obj.ToDatabaseData();
      arr.push({
        id: id,
        type: type,
        objData: objData
      });
    }
    return arr;
  };

  SchemeData.prototype.properties_to_list_on_page = function(response, appConfig) {
    var countConn, elementName, i, inp, item, label, li, list, userName, _i, _ref;
    item = document.createElement('div');
    item.classList.add(appConfig.classSchemeElementProperties);
    userName = document.createElement('h3');
    userName.classList.add(appConfig.classUserElementName);
    userName.innerHTML = response.data.userName;
    elementName = document.createElement('p');
    elementName.classList.add(appConfig.classElementName);
    elementName.innerHTML = response.data.name;
    countConn = document.createElement('p');
    countConn.classList.add(appConfig.classCountElementConnections);
    countConn.innerHTML = response.data.connections;
    list = document.createElement('ul');
    list.classList.add(appConfig.classPropertyList);
    for (i = _i = 0, _ref = response.data.properties.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      li = document.createElement('li');
      label = document.createElement('label');
      label.innerHTML = response.data.properties[i].name;
      inp = document.createElement('input');
      inp.type = 'text';
      inp.value = response.data.properties[i].value;
      label.appendChild(inp);
      li.appendChild(label);
      list.appendChild(li);
    }
    item.appendChild(userName);
    item.appendChild(elementName);
    item.appendChild(countConn);
    item.appendChild(list);
    $('.' + appConfig.classSchemeElementPropertiesBlock)[0].appendChild(item);
    return item;
  };

  SchemeData.prototype.get_properties_from_page = function() {};

  SchemeData.prototype.load_element_properties = function(element_id, scheme_id, appConfig, on_success) {
    var new_div, url;
    url = appConfig.urlToAJAXLoadProperties;
    new_div = '';
    this.AJAX_query(url, "load_properties", element_id, (function(_this) {
      return function(res) {
        new_div = _this.properties_to_list_on_page(res, appConfig);
        return on_success(new_div);
      };
    })(this));
    return new_div;
  };

  SchemeData.prototype.load_data_from_server = function(appConfig, areaMap, on_success) {
    var url;
    url = appConfig.urlToAJAXLoadProperties;
    return this.AJAX_query(url, "load_scheme", "", (function(_this) {
      return function(res) {
        _this.add_from_AJAX_data(res.data, areaMap, appConfig);
        return on_success(res);
      };
    })(this));
  };

  SchemeData.prototype.save_data_to_server = function(url_to_AJAX_save_data) {
    var data, url;
    data = this.to_AJAX_data();
    url = url_to_AJAX_save_data;
    return this.AJAX_query(url, "save_scheme", data, (function(_this) {
      return function() {};
    })(this));
  };

  SchemeData.prototype.AJAX_query = function(url, query_name, data, on_success) {
    return $.ajax({
      type: 'POST',
      url: url,
      data: "query=" + query_name + "; data=" + data + "; ",
      success: (function(_this) {
        return function(res) {
          console.log(res);
          return on_success(res);
        };
      })(this)
    });
  };

  SchemeData.prototype.set_RoR_header_for_AJAX = function() {
    return $.ajaxSetup({
      headers: {
        'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
      }
    });
  };

  SchemeData.prototype.count_component = function() {
    return this.listComponents.length;
  };

  SchemeData.prototype.last_component = function() {
    return this.listComponents[this.listComponents.length - 1];
  };

  SchemeData.prototype.get_by_id = function(id) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.listComponents[i].id === id) {
        return this.listComponents[i];
      }
    }
    return void 0;
  };

  SchemeData.prototype.get_position_in_array = function(id) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.listComponents[i].id === id) {
        return i;
      }
    }
    return void 0;
  };

  SchemeData.prototype.get_new_id = function() {
    var id;
    id = this.listComponents.length + 1;
    while (!this.is_unique_id(id)) {
      id++;
    }
    return id;
  };

  SchemeData.prototype.is_unique_id = function(id) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = this.listComponents.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.listComponents[i].id === id) {
        return false;
      }
    }
    return true;
  };

  return SchemeData;

})();

SchemeElement = (function() {
  SchemeElement.isMouseHover = false;

  function SchemeElement(id, x, y, width, height, countOfConnections, image, borderColor, areaMap, DOMPropertiesList) {
    this.id = id;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.countOfConnections = countOfConnections;
    this.image = image;
    this.borderColor = borderColor;
    this.areaMap = areaMap;
    this.DOMPropertiesList = DOMPropertiesList;
    this.Move = __bind(this.Move, this);
    this.ResizeRight = __bind(this.ResizeRight, this);
    this.ResizeLeft = __bind(this.ResizeLeft, this);
    this.ResizeTop = __bind(this.ResizeTop, this);
    this.ResizeBottom = __bind(this.ResizeBottom, this);
    this.ValidateRange = __bind(this.ValidateRange, this);
    this.ValidateNewSize = __bind(this.ValidateNewSize, this);
    this.ValidateCoords = __bind(this.ValidateCoords, this);
    this.IsRightResize = __bind(this.IsRightResize, this);
    this.IsLeftResize = __bind(this.IsLeftResize, this);
    this.IsBottomResize = __bind(this.IsBottomResize, this);
    this.IsTopResize = __bind(this.IsTopResize, this);
    this.RemoveFromMap = __bind(this.RemoveFromMap, this);
    this.PlaceToMap = __bind(this.PlaceToMap, this);
    this.GetColorByMouseHover = __bind(this.GetColorByMouseHover, this);
    this.DrawShadowRect = __bind(this.DrawShadowRect, this);
    this.GetImgHeight = __bind(this.GetImgHeight, this);
    this.GetImgWidth = __bind(this.GetImgWidth, this);
    this.Draw = __bind(this.Draw, this);
    this.ToDatabaseData = __bind(this.ToDatabaseData, this);
    this.offsetBorderResizeble = 3;
    this.width = Math.round(this.width / this.areaMap.step) * this.areaMap.step;
    this.height = Math.round(this.height / this.areaMap.step) * this.areaMap.step;
    this.PlaceToMap();
  }

  SchemeElement.prototype.ToDatabaseData = function() {
    return {
      x: this.x,
      y: this.y,
      width: this.width,
      height: this.height,
      CountOfConnections: this.CountOfConnections
    };
  };

  SchemeElement.prototype.Draw = function(ctx, colorOnHover) {
    var avgX, avgY, color, h, w;
    color = this.GetColorByMouseHover(this.borderColor, colorOnHover);
    this.DrawShadowRect(this.x, this.y, this.width, this.height, color, ctx);
    w = this.GetImgWidth(this.image.width, this.width);
    h = this.GetImgHeight(this.image.height, this.height);
    avgX = this.x + Math.round((this.width - w) / 2);
    avgY = this.y + Math.round((this.height - h) / 2);
    return ctx.drawImage(this.image, avgX, avgY, w, h);
  };

  SchemeElement.prototype.GetImgWidth = function(imgW, w) {
    if (imgW < w) {
      return imgW;
    } else {
      return w;
    }
  };

  SchemeElement.prototype.GetImgHeight = function(imgH, h) {
    if (imgH < h) {
      return imgH;
    } else {
      return h;
    }
  };

  SchemeElement.prototype.DrawShadowRect = function(x, y, w, h, color, ctx) {
    ctx.beginPath();
    ctx.shadowColor = color;
    ctx.shadowBlur = 3;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    ctx.fillStyle = color;
    ctx.fillRect(x, y, w, h);
    ctx.closePath();
    return ctx.fill();
  };

  SchemeElement.prototype.GetColorByMouseHover = function(color, hoverColor) {
    if (this.isMouseHover) {
      return hoverColor;
    } else {
      return color;
    }
  };

  SchemeElement.prototype.PlaceToMap = function() {
    var i, j, startI, startJ, toI, toJ, _i, _results;
    startJ = Math.round(this.x / this.areaMap.step);
    startI = Math.round(this.y / this.areaMap.step);
    toJ = Math.round(this.width / this.areaMap.step) + startJ;
    toI = Math.round(this.height / this.areaMap.step) + startI;
    _results = [];
    for (i = _i = startI; startI <= toI ? _i <= toI : _i >= toI; i = startI <= toI ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = startJ; startJ <= toJ ? _j <= toJ : _j >= toJ; j = startJ <= toJ ? ++_j : --_j) {
          _results1.push(this.areaMap.set_cell(i, j, this.id));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  SchemeElement.prototype.RemoveFromMap = function() {
    var startI, startJ, toI, toJ;
    startJ = Math.round(this.x / this.areaMap.step);
    startI = Math.round(this.y / this.areaMap.step);
    toJ = Math.round(this.width / this.areaMap.step) + startJ;
    toI = Math.round(this.height / this.areaMap.step) + startI;
    return this.areaMap.clear_range(startI, toI, startJ, toJ);
  };

  SchemeElement.prototype.IsTopResize = function(y) {
    if (this.y < y + this.offsetBorderResizeble && this.y > y - this.offsetBorderResizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.IsBottomResize = function(y) {
    if (this.y + this.height < y + this.offsetBorderResizeble && this.y + this.height > y - this.offsetBorderResizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.IsLeftResize = function(x) {
    if (this.x < x + this.offsetBorderResizeble && this.x > x - this.offsetBorderResizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.IsRightResize = function(x) {
    if (this.x + this.width < x + this.offsetBorderResizeble && this.x + this.width > x - this.offsetBorderResizeble) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.ValidateCoords = function(x, y) {
    if (this.areaMap.validate_map_indexes(y / this.areaMap.step, x / this.areaMap.step) && x + this.width <= this.areaMap.width && y + this.height <= this.areaMap.height) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.ValidateNewSize = function(newSize) {
    if (newSize < this.areaMap.step) {
      return false;
    } else {
      return true;
    }
  };

  SchemeElement.prototype.ValidateRange = function(r) {
    if (this.areaMap.is_empty_or_key_map_range(r.fromI, r.toI, r.fromJ, r.toJ, this.id)) {
      return true;
    } else {
      return false;
    }
  };

  SchemeElement.prototype.ResizeBottom = function(newY) {
    var newH, r;
    newY = Math.round(newY / this.areaMap.step) * this.areaMap.step;
    newH = newY - this.y;
    r = this.areaMap.get_rect_map_range(this.x, this.y, this.width, newH);
    if (!(this.ValidateNewSize(newH) && this.ValidateRange(r))) {
      return false;
    }
    this.RemoveFromMap();
    this.height = newH;
    return this.PlaceToMap();
  };

  SchemeElement.prototype.ResizeTop = function(newY) {
    var newH, r;
    newY = Math.round(newY / this.areaMap.step) * this.areaMap.step;
    newH = this.y + this.height - newY;
    r = this.areaMap.get_rect_map_range(this.x, newY, this.width, newH);
    if (!(this.ValidateNewSize(newH) && this.ValidateRange(r))) {
      return false;
    }
    this.RemoveFromMap();
    this.height = newH;
    this.y = newY;
    return this.PlaceToMap();
  };

  SchemeElement.prototype.ResizeLeft = function(newX) {
    var newW, r;
    newX = Math.round(newX / this.areaMap.step) * this.areaMap.step;
    newW = this.x + this.width - newX;
    r = this.areaMap.get_rect_map_range(newX, this.y, newW, this.height);
    if (!(this.ValidateNewSize(newW) && this.ValidateRange(r))) {
      return false;
    }
    this.RemoveFromMap();
    this.width = newW;
    this.x = newX;
    return this.PlaceToMap();
  };

  SchemeElement.prototype.ResizeRight = function(newX) {
    var newW, r;
    newX = Math.round(newX / this.areaMap.step) * this.areaMap.step;
    newW = newX - this.x;
    r = this.areaMap.get_rect_map_range(this.x, this.y, newW, this.height);
    if (!(this.ValidateNewSize(newW) && this.ValidateRange(r))) {
      return false;
    }
    this.RemoveFromMap();
    this.width = newW;
    return this.PlaceToMap();
  };

  SchemeElement.prototype.Move = function(newX, newY) {
    var r;
    newX = Math.round(newX / this.areaMap.step) * this.areaMap.step;
    newY = Math.round(newY / this.areaMap.step) * this.areaMap.step;
    r = this.areaMap.get_rect_map_range(newX, newY, this.width, this.height);
    if (!(this.ValidateCoords(newX, newY) && this.ValidateRange(r))) {
      return false;
    }
    this.RemoveFromMap();
    this.x = newX;
    this.y = newY;
    return this.PlaceToMap();
  };

  return SchemeElement;

})();

SchemeLine = (function() {
  function SchemeLine(coords, borderColor) {
    this.coords = coords;
    this.borderColor = borderColor;
    this.DrawLine = __bind(this.DrawLine, this);
    this.Draw = __bind(this.Draw, this);
  }

  SchemeLine.prototype.Draw = function() {};

  SchemeLine.prototype.DrawLine = function(coords, color) {
    var i, _i, _ref;
    this.context.beginPath();
    for (i = _i = 0, _ref = coords.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.context.moveTo(coords[i][0], coords[i][1]);
      this.context.lineTo(coords[i + 1][0], coords[i + 1][1]);
    }
    this.context.lineWidth = 2;
    this.context.strokeStyle = color;
    this.context.lineCap = "butt";
    return this.context.stroke();
  };

  return SchemeLine;

})();
