// Generated by CoffeeScript 1.8.0
(function() {
  var Animation, DrawingArea, EventsHanlerInitializer, SchemeComponents, SchemeLines,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Animation = (function() {
    function Animation() {
      this.InitStage = __bind(this.InitStage, this);
      this.loopr = __bind(this.loopr, this);
      this.stop = __bind(this.stop, this);
      this.start = __bind(this.start, this);
      this.setAnimated = __bind(this.setAnimated, this);
      this.UpdateScene = __bind(this.UpdateScene, this);
      this.isAnimated = __bind(this.isAnimated, this);
      this.getStage = __bind(this.getStage, this);
      this.getFPS = __bind(this.getFPS, this);
      this.getFrame = __bind(this.getFrame, this);
      this.getTimeInterval = __bind(this.getTimeInterval, this);
      this.getDuration = __bind(this.getDuration, this);
      this.stage;
      this.startTime;
      this.lastTime;
      this.timeInterval;
      this.duration = 0;
      this.frame = 0;
      this.fps;
      this.animated = false;
    }

    Animation.prototype.getDuration = function(SI) {
      if (SI === 'sec') {
        return Math.round(this.duration / 1000);
      } else {
        return this.duration;
      }
    };

    Animation.prototype.getTimeInterval = function() {
      return this.timeInterval;
    };

    Animation.prototype.getFrame = function() {
      return this.frame;
    };

    Animation.prototype.getFPS = function() {
      return this.fps;
    };

    Animation.prototype.getStage = function() {
      return this.stage();
    };

    Animation.prototype.isAnimated = function() {
      return this.animated;
    };

    Animation.prototype.UpdateScene = function(_stage) {
      return this.stage = _stage;
    };

    Animation.prototype.setAnimated = function(flag) {
      var _ref;
      return this.animated = (_ref = flag === true || flag === false) != null ? _ref : {
        flag: this.animated
      };
    };

    Animation.prototype.start = function() {
      var date;
      window.requestAnimFrame = (function(callback) {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
          console.log(callback + ' - clbxk');
          return window.setTimeout(callback, 10);
        };
      })();
      this.setAnimated(true);
      date = new Date();
      this.startTime = date.getTime();
      this.lastTime = this.startTime;
      return this.loopr();
    };

    Animation.prototype.stop = function() {
      return this.setAnimated(false);
    };

    Animation.prototype.loopr = function() {
      this.timeInterval = new Date().getTime() - this.lastTime;
      this.duration += this.timeInterval;
      this.lastTime = new Date().getTime();
      this.delta = this.timeInterval / 1000;
      this.fps = Math.round(1 / this.delta);
      this.frame++;
      this.InitStage();
      if (this.animated) {
        return requestAnimFrame((function(_this) {
          return function() {
            return _this.loopr();
          };
        })(this));
      } else {
        return console.log("animation is stopped ");
      }
    };

    Animation.prototype.InitStage = function() {
      if (this.stage !== void 0) {
        this.getStage();
      } else {
        console.log("undefined stage: ");
      }
      return [];
    };

    return Animation;

  })();

  DrawingArea = (function() {
    function DrawingArea(myConfig) {
      this.myConfig = myConfig;
      this.MouseMoveBall = __bind(this.MouseMoveBall, this);
      this.MoveBallIfMouseDown = __bind(this.MoveBallIfMouseDown, this);
      this.sqr = __bind(this.sqr, this);
      this.CheckMouseHoverOnBall = __bind(this.CheckMouseHoverOnBall, this);
      this.CheckCollition = __bind(this.CheckCollition, this);
      this.ChangeColorByHover = __bind(this.ChangeColorByHover, this);
      this.GetOffsetFromCanvas = __bind(this.GetOffsetFromCanvas, this);
      this.DrawShadowRect = __bind(this.DrawShadowRect, this);
      this.DrawAllSchemeComponent = __bind(this.DrawAllSchemeComponent, this);
      this.DrawSchemeComponent = __bind(this.DrawSchemeComponent, this);
      this.GetSelectedColor = __bind(this.GetSelectedColor, this);
      this.ClearScene = __bind(this.ClearScene, this);
      this.DrawImage = __bind(this.DrawImage, this);
      this.DrawGrid = __bind(this.DrawGrid, this);
      this.DrawLines = __bind(this.DrawLines, this);
      this.DrawLine = __bind(this.DrawLine, this);
      this.DrawBackground = __bind(this.DrawBackground, this);
      this.defShadowBlur = 10;
      this.defBallsColor = 'rgba(0,0,0,1)';
      this.defBallHoverColor = '#4169E1';
      this.canvas = document.getElementById(this.myConfig.canvasId);
      this.canvas.height = this.myConfig.canvasHeight;
      this.canvas.width = this.myConfig.canvasWidth;
      this.context = this.canvas.getContext("2d");
      this.mousePos = [];
      this.mouseDown = false;
      this.isStart = false;
      this.dragingToSchemeElement = "";
    }

    DrawingArea.prototype.DrawBackground = function() {
      this.context.beginPath();
      this.context.fillStyle = 'rgba( 200, 255, 255, 1 )';
      this.context.rect(0, 0, this.canvas.width, this.canvas.height);
      this.context.closePath();
      return this.context.fill();
    };

    DrawingArea.prototype.DrawLine = function(coords, color) {
      var i, _i, _ref;
      this.context.beginPath();
      for (i = _i = 0, _ref = coords.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.context.moveTo(coords[i][0], coords[i][1]);
        this.context.lineTo(coords[i + 1][0], coords[i + 1][1]);
      }
      this.context.lineWidth = 2;
      this.context.strokeStyle = color;
      this.context.lineCap = "butt";
      return this.context.stroke();
    };

    DrawingArea.prototype.DrawLines = function(lines) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = lines.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.DrawLine(lines[i].coords));
      }
      return _results;
    };

    DrawingArea.prototype.DrawGrid = function(step) {
      var i, j, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.canvas.width / step; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.canvas.height / step; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            this.context.beginPath();
            this.context.arc(i * step, j * step, 1, 0, 2 * Math.PI);
            this.context.fillStyle = 'blue';
            this.context.closePath();
            _results1.push(this.context.fill());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    DrawingArea.prototype.DrawImage = function(image, dx, dy) {
      return this.context.drawImage(image, dx, dy);
    };

    DrawingArea.prototype.ClearScene = function() {
      return this.DrawBackground();
    };

    DrawingArea.prototype.GetSelectedColor = function() {
      return $('#' + this.myConfig.idPaintForm + ' ' + this.myConfig.classColorSelector)[0].value;
    };

    DrawingArea.prototype.DrawSchemeComponent = function(component) {
      this.DrawShadowRect(component.x, component.y, component.image.width, component.image.height, component.borderColor);
      return this.DrawImage(component.image, component.x, component.y);
    };

    DrawingArea.prototype.DrawAllSchemeComponent = function(components) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = components.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.DrawSchemeComponent(components[i]));
      }
      return _results;
    };

    DrawingArea.prototype.DrawShadowRect = function(x, y, w, h, color) {
      this.context.beginPath();
      this.context.shadowColor = color;
      this.context.shadowBlur = 3;
      this.context.shadowOffsetX = 0;
      this.context.shadowOffsetY = 0;
      this.context.rect(x, y, w, h);
      this.context.closePath();
      return this.context.fill();
    };

    DrawingArea.prototype.GetOffsetFromCanvas = function(x, y) {
      return {
        x: x - this.canvas.offsetLeft,
        y: y - this.canvas.offsetTop
      };
    };

    DrawingArea.prototype.ChangeColorByHover = function(ball) {
      if (this.CheckMouseHoverOnBall(ball) && this.CheckPressedAnyButtons() === false) {
        return this.defBallHoverColor;
      } else {
        return ball.color;
      }
    };

    DrawingArea.prototype.CheckCollition = function(ball, line) {
      if (this.CalcDistanceFromPointToLine(ball.x, ball.y, line.fromX, line.fromY, line.toX, line.toY) <= ball.radius) {
        return true;
      } else {
        return false;
      }
    };

    DrawingArea.prototype.CheckMouseHoverOnBall = function(ball) {
      var x, y;
      x = this.mousePos['currentX'];
      y = this.mousePos['currentY'];
      if ((this.sqr(x - ball.x) + this.sqr(y - ball.y)) <= this.sqr(ball.radius)) {
        return true;
      } else {
        return false;
      }
    };

    DrawingArea.prototype.sqr = function(val) {
      return val * val;
    };

    DrawingArea.prototype.MoveBallIfMouseDown = function(ballsNumber) {
      if (this.idMovingBall >= 0) {
        return this.MouseMoveBall(this.idMovingBall);
      } else if (this.mouseDown && this.CheckMouseHoverOnBall(this.ballsArray.balls[ballsNumber]) && this.CheckPressedAnyButtons() === false) {
        this.idMovingBall = ballsNumber;
        return this.MouseMoveBall(ballsNumber);
      }
    };

    DrawingArea.prototype.MouseMoveBall = function(ballsNumber) {};

    return DrawingArea;

  })();

  $(document).ready((function(_this) {
    return function() {
      var AreaUpdater;
      _this.myConfig = {
        classSchemeElementImage: '.scheme-element-image',
        classPaintSchemeForm: '.paint-scheme-form',
        schemeElementImage: '.scheme-element-image',
        classColorSelector: '.color-selector',
        gridStep: '10',
        canvasId: 'canvas',
        canvasWidth: '600',
        canvasHeight: '400',
        idPaintForm: '1'
      };
      _this.drawingArea = new DrawingArea(_this.myConfig);
      _this.schemeComponents = new SchemeComponents();
      _this.schemeLines = new SchemeLines();
      _this.EventsHanlerInitializer = new EventsHanlerInitializer(_this);
      _this.anim = new Animation(true);
      AreaUpdater = function() {
        _this.drawingArea.DrawBackground();
        _this.drawingArea.DrawGrid(_this.myConfig.gridStep);
        return _this.drawingArea.DrawAllSchemeComponent(_this.schemeComponents.GetListComponent());
      };
      _this.anim.UpdateScene(AreaUpdater);
      return _this.anim.start();
    };
  })(this));

  EventsHanlerInitializer = (function() {
    function EventsHanlerInitializer(app) {
      this.app = app;
      $(this.app.myConfig.classSchemeElementImage).on('mousedown', (function(_this) {
        return function(e) {
          return _this.app.drawingArea.dragingToSchemeElement = e.currentTarget;
        };
      })(this));
      $((function(_this) {
        return function() {
          return $(_this.app.myConfig.schemeElementImage).draggable({
            grid: [_this.app.myConfig.gridStep, _this.app.myConfig.gridStep],
            containment: "#" + _this.app.myConfig.canvasId,
            helper: "clone",
            drag: function(event, ui) {
              _this.app.drawingArea.mousePos['currentX'] = ui.helper['0'].offsetLeft;
              return _this.app.drawingArea.mousePos['currentY'] = ui.helper['0'].offsetTop;
            },
            stop: function() {
              var color, countConn, id, img, trueCoords;
              img = _this.app.drawingArea.dragingToSchemeElement;
              countConn = 2;
              color = _this.app.drawingArea.GetSelectedColor();
              id = _this.app.schemeComponents.CountComponent();
              trueCoords = _this.app.drawingArea.GetOffsetFromCanvas(_this.app.drawingArea.mousePos['currentX'], _this.app.drawingArea.mousePos['currentY']);
              _this.app.schemeComponents.Add(id, trueCoords.x, trueCoords.y, countConn, img, color);
              return _this.app.drawingArea.DrawSchemeComponent(_this.app.schemeComponents.LastComponent());
            }
          });
        };
      })(this));
    }

    return EventsHanlerInitializer;

  })();

  SchemeComponents = (function() {
    function SchemeComponents(listComponent) {
      this.listComponent = listComponent;
      this.LastComponent = __bind(this.LastComponent, this);
      this.CountComponent = __bind(this.CountComponent, this);
      this.GetListComponent = __bind(this.GetListComponent, this);
      this.GetComponent = __bind(this.GetComponent, this);
      this.FindById = __bind(this.FindById, this);
      this.FindByXY = __bind(this.FindByXY, this);
      this.Remove = __bind(this.Remove, this);
      this.listComponent = __bind(this.listComponent, this);
      this.listComponent = new Array();
    }

    SchemeComponents.prototype.listComponent = function() {
      return this.listComponent;
    };

    SchemeComponents.prototype.Add = function(id, x, y, CountOfConnections, image, borderColor) {
      return this.listComponent.push({
        id: id,
        x: x,
        y: y,
        CountOfConnections: CountOfConnections,
        image: image,
        borderColor: borderColor
      });
    };

    SchemeComponents.prototype.Remove = function(indx) {
      return this.listComponent.splice(indx, 1);
    };

    SchemeComponents.prototype.FindByXY = function(x, y) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.listComponent.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.listComponent[i].x === x && this.listComponent.y === y) {
          _results.push(this.listComponent[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SchemeComponents.prototype.FindById = function(x, y) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.listComponent.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.listComponent[i].x === x && this.listComponent.y === y) {
          _results.push(this.listComponent[i]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SchemeComponents.prototype.GetComponent = function(number) {
      return this.listComponent[number];
    };

    SchemeComponents.prototype.GetListComponent = function() {
      return this.listComponent;
    };

    SchemeComponents.prototype.CountComponent = function() {
      return this.listComponent.length;
    };

    SchemeComponents.prototype.LastComponent = function() {
      return this.listComponent[this.listComponent.length - 1];
    };

    return SchemeComponents;

  })();

  SchemeLines = (function() {
    function SchemeLines() {
      this.FindById = __bind(this.FindById, this);
      this.Remove = __bind(this.Remove, this);
    }

    SchemeLines.listLines = new Array();

    SchemeLines.prototype.Add = function(id, coords, color) {
      return this.listLines.push({
        'id': id,
        'coords': coords,
        'color': color
      });
    };

    SchemeLines.prototype.Remove = function(indx) {
      return this.listLines.splice(indx, 1);
    };

    SchemeLines.prototype.FindById = function(id) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.listLines.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.listLines[i].id === id) {
          return this.listLines[i];
        }
      }
    };

    return SchemeLines;

  })();

}).call(this);
